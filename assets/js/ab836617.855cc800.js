(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{258:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return b})),a.d(t,"toc",(function(){return p})),a.d(t,"default",(function(){return i}));var n=a(3),c=a(7),l=(a(0),a(377)),r=["components"],s={title:"Rucio REST API"},b={unversionedId:"rucio_rest_api",id:"rucio_rest_api",isDocsHomePage:!1,title:"Table of Contents",description:"* lifetime\\exceptions",source:"@site/../docs/rucio_rest_api.md",sourceDirName:".",slug:"/rucio_rest_api",permalink:"/documentation/rucio_rest_api",editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/rucio_rest_api.md",version:"current",frontMatter:{title:"Rucio REST API"}},p=[],o={toc:p};function i(e){var t=e.components,a=Object(c.a)(e,r);return Object(l.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#lifetime_exceptions"},"lifetime","_","exceptions"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#lifetime_exceptions.LifetimeException"},"LifetimeException"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#lifetime_exceptions.LifetimeException.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#lifetime_exceptions.LifetimeException.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#lifetime_exceptions.LifetimeExceptionId"},"LifetimeExceptionId"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#lifetime_exceptions.LifetimeExceptionId.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#lifetime_exceptions.LifetimeExceptionId.put"},"put")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#lifetime_exceptions.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#metrics"},"metrics")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#credentials"},"credentials"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#credentials.SignURL"},"SignURL"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#credentials.SignURL.options"},"options")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#credentials.SignURL.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#credentials.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#export"},"export"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#export.Export"},"Export"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#export.Export.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#export.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#scopes"},"scopes"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#scopes.Scope"},"Scope"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#scopes.Scope.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#scopes.Scope.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#scopes.AccountScopeList"},"AccountScopeList"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#scopes.AccountScopeList.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#scopes.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules"},"rules"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.Rule"},"Rule"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.Rule.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.Rule.put"},"put")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.Rule.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.AllRule"},"AllRule"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.AllRule.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.AllRule.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.ReplicaLocks"},"ReplicaLocks"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.ReplicaLocks.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.ReduceRule"},"ReduceRule"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.ReduceRule.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.MoveRule"},"MoveRule"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.MoveRule.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.RuleHistory"},"RuleHistory"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.RuleHistory.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.RuleHistoryFull"},"RuleHistoryFull"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.RuleHistoryFull.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.RuleAnalysis"},"RuleAnalysis"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.RuleAnalysis.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rules.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids"},"dids"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Scope"},"Scope"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Scope.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Search"},"Search"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Search.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.SearchExtended"},"SearchExtended"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.SearchExtended.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.BulkDIDS"},"BulkDIDS"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.BulkDIDS.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Attachments"},"Attachments"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Attachments.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.DIDs"},"DIDs"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.DIDs.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.DIDs.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.DIDs.put"},"put")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Attachment"},"Attachment"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Attachment.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Attachment.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Attachment.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.AttachmentHistory"},"AttachmentHistory"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.AttachmentHistory.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Files"},"Files"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Files.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Parents"},"Parents"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Parents.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Meta"},"Meta"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Meta.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Meta.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Meta.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.SingleMeta"},"SingleMeta"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.SingleMeta.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.BulkDIDsMeta"},"BulkDIDsMeta"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.BulkDIDsMeta.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Rules"},"Rules"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Rules.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.BulkMeta"},"BulkMeta"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.BulkMeta.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.AssociatedRules"},"AssociatedRules"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.AssociatedRules.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.GUIDLookup"},"GUIDLookup"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.GUIDLookup.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Sample"},"Sample"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Sample.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.NewDIDs"},"NewDIDs"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.NewDIDs.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Resurrect"},"Resurrect"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Resurrect.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Follow"},"Follow"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Follow.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Follow.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.Follow.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dids.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#identities"},"identities"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#identities.UserPass"},"UserPass"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#identities.UserPass.put"},"put")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#identities.X509"},"X509"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#identities.X509.put"},"put")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#identities.GSS"},"GSS"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#identities.GSS.put"},"put")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#identities.Accounts"},"Accounts"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#identities.Accounts.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#identities.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#import"},"import"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#import.Import"},"Import"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#import.Import.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#import.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#common"},"common"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#common.ErrorHandlingMethodView"},"ErrorHandlingMethodView"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#common.ErrorHandlingMethodView.get_headers"},"get","_","headers")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#common.check_accept_header_wrapper_flask"},"check","_","accept","_","header","_","wrapper","_","flask")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#common.parse_scope_name"},"parse","_","scope","_","name")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#common.try_stream"},"try","_","stream")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#common.generate_http_error_flask"},"generate","_","http","_","error","_","flask")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#common.json_parameters"},"json","_","parameters")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#common.json_list"},"json","_","list")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#common.extract_vo"},"extract","_","vo")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#subscriptions"},"subscriptions"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#subscriptions.Subscription"},"Subscription"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#subscriptions.Subscription.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#subscriptions.Subscription.put"},"put")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#subscriptions.Subscription.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#subscriptions.SubscriptionName"},"SubscriptionName"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#subscriptions.SubscriptionName.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#subscriptions.Rules"},"Rules"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#subscriptions.Rules.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#subscriptions.States"},"States"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#subscriptions.States.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#subscriptions.SubscriptionId"},"SubscriptionId"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#subscriptions.SubscriptionId.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#subscriptions.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#traces"},"traces"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#traces.Trace"},"Trace"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#traces.Trace.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#traces.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#config"},"config"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#config.Config"},"Config"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#config.Config.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#config.Config.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#config.Section"},"Section"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#config.Section.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#config.OptionGetDel"},"OptionGetDel"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#config.OptionGetDel.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#config.OptionGetDel.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#config.OptionSet"},"OptionSet"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#config.OptionSet.put"},"put")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#config.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#ping"},"ping"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#ping.Ping"},"Ping"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#ping.Ping.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#ping.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dirac"},"dirac"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dirac.AddFiles"},"AddFiles"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dirac.AddFiles.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#dirac.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#requests"},"requests"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#requests.RequestGet"},"RequestGet"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#requests.RequestGet.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#requests.RequestList"},"RequestList"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#requests.RequestList.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#requests.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#main"},"main")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#nongrid_traces"},"nongrid","_","traces"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#nongrid_traces.XAODTrace"},"XAODTrace"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#nongrid_traces.XAODTrace.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#nongrid_traces.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#vos"},"vos"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#vos.VOs"},"VOs"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#vos.VOs.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#vos.VO"},"VO"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#vos.VO.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#vos.VO.put"},"put")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#vos.RecoverVO"},"RecoverVO"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#vos.RecoverVO.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#vos.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#tmp_dids"},"tmp","_","dids"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#tmp_dids.BulkDIDS"},"BulkDIDS"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#tmp_dids.BulkDIDS.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#tmp_dids.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#meta"},"meta"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#meta.Meta"},"Meta"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#meta.Meta.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#meta.Meta.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#meta.Values"},"Values"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#meta.Values.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#meta.Values.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#meta.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts"},"accounts"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Attributes"},"Attributes"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Attributes.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Attributes.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Attributes.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Scopes"},"Scopes"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Scopes.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Scopes.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.AccountParameter"},"AccountParameter"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.AccountParameter.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.AccountParameter.put"},"put")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.AccountParameter.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.AccountParameter.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Account"},"Account"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Account.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.LocalAccountLimits"},"LocalAccountLimits"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.LocalAccountLimits.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.GlobalAccountLimits"},"GlobalAccountLimits"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.GlobalAccountLimits.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Identities"},"Identities"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Identities.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Identities.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Identities.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Rules"},"Rules"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.Rules.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.UsageHistory"},"UsageHistory"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.UsageHistory.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.LocalUsage"},"LocalUsage"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.LocalUsage.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.GlobalUsage"},"GlobalUsage"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.GlobalUsage.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accounts.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses"},"rses"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.RSEs"},"RSEs"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.RSEs.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.RSE"},"RSE"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.RSE.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.RSE.put"},"put")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.RSE.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.RSE.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Attributes"},"Attributes"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Attributes.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Attributes.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Attributes.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.ProtocolList"},"ProtocolList"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.ProtocolList.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.LFNS2PFNS"},"LFNS2PFNS"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.LFNS2PFNS.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Protocol"},"Protocol"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Protocol.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Protocol.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Protocol.put"},"put")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Protocol.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Usage"},"Usage"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Usage.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Usage.put"},"put")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.UsageHistory"},"UsageHistory"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.UsageHistory.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Limits"},"Limits"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Limits.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Limits.put"},"put")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Limits.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.RSEAccountUsageLimit"},"RSEAccountUsageLimit"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.RSEAccountUsageLimit.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Distance"},"Distance"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Distance.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Distance.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Distance.put"},"put")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.Distance.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.QoSPolicy"},"QoSPolicy"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.QoSPolicy.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.QoSPolicy.delete"},"delete")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.QoSPolicy.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#rses.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth"},"auth"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.UserPass"},"UserPass"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.UserPass.options"},"options")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.UserPass.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.OIDC"},"OIDC"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.OIDC.options"},"options")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.OIDC.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.RedirectOIDC"},"RedirectOIDC"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.RedirectOIDC.options"},"options")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.RedirectOIDC.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.CodeOIDC"},"CodeOIDC"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.CodeOIDC.options"},"options")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.CodeOIDC.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.TokenOIDC"},"TokenOIDC"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.TokenOIDC.options"},"options")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.TokenOIDC.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.RefreshOIDC"},"RefreshOIDC"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.RefreshOIDC.options"},"options")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.RefreshOIDC.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.GSS"},"GSS"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.GSS.options"},"options")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.GSS.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.x509"},"x509"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.x509.options"},"options")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.x509.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.SSH"},"SSH"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.SSH.options"},"options")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.SSH.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.SSHChallengeToken"},"SSHChallengeToken"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.SSHChallengeToken.options"},"options")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.SSHChallengeToken.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.SAML"},"SAML"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.SAML.options"},"options")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.SAML.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.SAML.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.Validate"},"Validate"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.Validate.options"},"options")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.Validate.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#auth.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#heartbeats"},"heartbeats"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#heartbeats.Heartbeat"},"Heartbeat"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#heartbeats.Heartbeat.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#heartbeats.Heartbeat.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#heartbeats.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accountlimits"},"accountlimits"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accountlimits.LocalAccountLimit"},"LocalAccountLimit"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accountlimits.LocalAccountLimit.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accountlimits.LocalAccountLimit.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accountlimits.GlobalAccountLimit"},"GlobalAccountLimit"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accountlimits.GlobalAccountLimit.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accountlimits.GlobalAccountLimit.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#accountlimits.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#archives"},"archives"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#archives.Archive"},"Archive"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#archives.Archive.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#archives.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#redirect"},"redirect"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#redirect.MetaLinkRedirector"},"MetaLinkRedirector"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#redirect.MetaLinkRedirector.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#redirect.HeaderRedirector"},"HeaderRedirector"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#redirect.HeaderRedirector.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#redirect.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#__init__"},"_","_","init","_","_")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#locks"},"locks"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#locks.LockByRSE"},"LockByRSE"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#locks.LockByRSE.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#locks.LocksByScopeName"},"LocksByScopeName"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#locks.LocksByScopeName.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#locks.DatasetLocksForDids"},"DatasetLocksForDids"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#locks.DatasetLocksForDids.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#locks.make_doc"},"make","_","doc")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas"},"replicas"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.Replicas"},"Replicas"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.Replicas.get"},"get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.Replicas.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.Replicas.put"},"put")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.Replicas.delete"},"delete")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.ListReplicas"},"ListReplicas"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.ListReplicas.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.ReplicasDIDs"},"ReplicasDIDs"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.ReplicasDIDs.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.BadReplicas"},"BadReplicas"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.BadReplicas.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.SuspiciousReplicas"},"SuspiciousReplicas"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.SuspiciousReplicas.post"},"post")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.SuspiciousReplicas.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.BadReplicasStates"},"BadReplicasStates"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.BadReplicasStates.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.BadReplicasSummary"},"BadReplicasSummary"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.BadReplicasSummary.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.DatasetReplicas"},"DatasetReplicas"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.DatasetReplicas.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.DatasetReplicasBulk"},"DatasetReplicasBulk"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.DatasetReplicasBulk.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.DatasetReplicasVP"},"DatasetReplicasVP"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.DatasetReplicasVP.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.ReplicasRSE"},"ReplicasRSE"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.ReplicasRSE.get"},"get")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.BadDIDs"},"BadDIDs"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.BadDIDs.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.BadPFNs"},"BadPFNs"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.BadPFNs.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.Tombstone"},"Tombstone"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.Tombstone.post"},"post")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"#replicas.make_doc"},"make","_","doc"))))),Object(l.b)("a",{name:"lifetime_exceptions"}),"# lifetime\\_exceptions",Object(l.b)("a",{name:"lifetime_exceptions.LifetimeException"}),"## LifetimeException Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class LifetimeException(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for Lifetime Model exception."),Object(l.b)("a",{name:"lifetime_exceptions.LifetimeException.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get()\n")),Object(l.b)("p",null,"Retrieve all exceptions."),Object(l.b)("p",null,".. :quickref: LifetimeException; Get all exceptions."),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: Lifetime Exception Not Found.\n:status 406: Not Acceptable."),Object(l.b)("a",{name:"lifetime_exceptions.LifetimeException.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Create a new Lifetime Model exception."),Object(l.b)("p",null,".. :quickref: LifetimeException; Create new exception."),Object(l.b)("p",null,":\\<json string dids: The list of dids.\n:\\<json string pattern: The pattern.\n:\\<json string comments: The comment for the exception.\n:\\<json string expires_at: The expiration date for the exception.\n:resheader Content-Type: application/json\n:status 201: Created.\n:status 400: Cannot decode json parameter list.\n:status 401: Invalid Auth Token.\n:status 409: Lifetime Exception already exists."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"The id for the newly created execption."),Object(l.b)("a",{name:"lifetime_exceptions.LifetimeExceptionId"}),"## LifetimeExceptionId Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class LifetimeExceptionId(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for Lifetime Model exception."),Object(l.b)("a",{name:"lifetime_exceptions.LifetimeExceptionId.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(exception_id)\n")),Object(l.b)("p",null,"Retrieve an exception."),Object(l.b)("p",null,".. :quickref: LifetimeExceptionId; Get an exceptions."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"exception_id"),": The exception identifier.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: Lifetime Exception Not Found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of exceptions."),Object(l.b)("a",{name:"lifetime_exceptions.LifetimeExceptionId.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(exception_id)\n")),Object(l.b)("p",null,"Approve/Reject an execption."),Object(l.b)("p",null,".. :quickref: LifetimeExceptionId; Approve/reject exception."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"exception_id"),": The exception identifier.\n:\\<json string state: the new state (APPROVED/REJECTED)\n:status 201: Created.\n:status 400: Cannot decode json parameter list.\n:status 401: Invalid Auth Token.\n:status 404: Lifetime Exception Not Found.")),Object(l.b)("a",{name:"lifetime_exceptions.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"metrics"}),"# metrics",Object(l.b)("a",{name:"credentials"}),"# credentials",Object(l.b)("a",{name:"credentials.SignURL"}),"## SignURL Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class SignURL(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Request a signed URL."),Object(l.b)("a",{name:"credentials.SignURL.options"}),"#### options",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | options()\n")),Object(l.b)("p",null,"Allow cross-site scripting. Explicit for Authentication."),Object(l.b)("p",null,":resheader Access-Control-Allow-Origin:\n:resheader Access-Control-Allow-Headers:\n:resheader Access-Control-Allow-Methods:\n:resheader Access-Control-Allow-Credentials:\n:resheader Access-Control-Expose-Headers:\n:status 200: OK"),Object(l.b)("a",{name:"credentials.SignURL.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/octet-stream'])\n | get()\n")),Object(l.b)("p",null,"Sign a URL for a limited lifetime for a particular service."),Object(l.b)("p",null,":reqheader X-Rucio-VO: VO name as a string (Multi-VO only).\n:reqheader X-Rucio-Account: Account identifier as a string.\n:reqheader X-Rucio-AppID: Application identifier as a string.\n:status 200: Successfully signed URL\n:status 400: Bad Request\n:status 401: Unauthorized\n:status 406: Not Acceptable"),Object(l.b)("a",{name:"credentials.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation to add the prefix"),Object(l.b)("a",{name:"export"}),"# export",Object(l.b)("a",{name:"export.Export"}),"## Export Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Export(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Export data."),Object(l.b)("a",{name:"export.Export.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get()\n")),Object(l.b)("p",null,"Export data from Rucio."),Object(l.b)("p",null,".. :quickref: Export data"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example request"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"GET /export HTTP/1.1\nHost: rucio.cern.ch\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example response"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'HTTP/1.1 200 OK\nVary: Accept\nContent-Type: application/json\n\n{"rses": [{"rse": "MOCK", "rse_type": "TAPE"}], "distances": {}}\n')),Object(l.b)("p",null,":resheader Content-Type: application/json\n:status 200: DIDs found\n:status 401: Invalid Auth Token\n:status 406: Not Acceptable"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"dictionary with rucio data"),Object(l.b)("a",{name:"export.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation to add the prefix"),Object(l.b)("a",{name:"scopes"}),"# scopes",Object(l.b)("a",{name:"scopes.Scope"}),"## Scope Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Scope(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"scopes.Scope.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get()\n")),Object(l.b)("p",null,"List all scopes."),Object(l.b)("p",null,".. :quickref: Scopes; Get all scopes."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example request"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"GET /posts/ HTTP/1.1\nHost: rucio.com\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example response"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'HTTP/1.1 200 OK\nVary: Accept\nContent-Type: application/json\n\n["RSE1", "RSE2", "RSE3", "RSE4", "RSE5"]\n')),Object(l.b)("p",null,":resheader Content-Type: application/json\n:status 200: scopes found\n:status 406: Not Acceptable"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,":class:",Object(l.b)("inlineCode",{parentName:"p"},"String")),Object(l.b)("a",{name:"scopes.Scope.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(account, scope)\n")),Object(l.b)("p",null,"Add a new scope."),Object(l.b)("p",null,".. :quickref: Scopes; Add a new scope."),Object(l.b)("p",null,":resheader Location: post url\n:status 201: scope created\n:status 404: account does not exist\n:status 401: unauthorized\n:status 409: scope already exists"),Object(l.b)("a",{name:"scopes.AccountScopeList"}),"## AccountScopeList Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class AccountScopeList(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"scopes.AccountScopeList.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(account)\n")),Object(l.b)("p",null,"List account scopes."),Object(l.b)("p",null,".. :quickref: Scopes; Get scopes for account."),Object(l.b)("p",null,":resheader Content-Type: application/json\n:status 200: Scopes found\n:status 404: Account not found\n:status 404: No scopes for this account\n:status 406: Not Acceptable"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list containing all scope names for an account."),Object(l.b)("a",{name:"scopes.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"rules"}),"# rules",Object(l.b)("a",{name:"rules.Rule"}),"## Rule Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Rule(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for replication rules."),Object(l.b)("a",{name:"rules.Rule.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(rule_id)\n")),Object(l.b)("p",null,"get rule information for given rule id."),Object(l.b)("p",null,".. :quickref: Rule; get rule info"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"JSON dict containing informations about the requested user.\n:status 200: Rule found\n:status 406: Not Acceptable\n:status 410: Invalid Auth Token\n:status 404: no rule found for id"),Object(l.b)("a",{name:"rules.Rule.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(rule_id)\n")),Object(l.b)("p",null,"Update the replication rules locked flag ."),Object(l.b)("p",null,".. :quickref: Rule; update rule"),Object(l.b)("p",null,":status 200: Rule found\n:status 401: Invalid Auth Token\n:status 404: no rule found for id"),Object(l.b)("a",{name:"rules.Rule.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(rule_id)\n")),Object(l.b)("p",null,"Delete a new replication rule."),Object(l.b)("p",null,".. :quickref: Rule; delete rule"),Object(l.b)("p",null,":status 200: DIDs found\n:status 401: Invalid Auth Token\n:status 404: no rule found for id"),Object(l.b)("a",{name:"rules.AllRule"}),"## AllRule Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class AllRule(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for all rules."),Object(l.b)("a",{name:"rules.AllRule.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get()\n")),Object(l.b)("p",null,"Return all rules of a given account."),Object(l.b)("p",null,".. :quickref: AllRule; get all rules for account"),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream\n:status 200: Rule found\n:status 401: Invalid Auth Token\n:status 404: no rule found for id\n:status 406: Not Acceptable\n:query scope: The scope name."),Object(l.b)("a",{name:"rules.AllRule.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Create a new replication rule."),Object(l.b)("p",null,".. :quickref: AllRule; create new rule"),Object(l.b)("p",null,":\\<json list dids: List of data identifiers.\n:\\<json string account: Account issuing the rule.\n:\\<json int copies: The number of replicas.\n:\\<json string rse_expression: RSE expression which gets resolved into a list of RSEs.\n:\\<json string grouping: ALL -  All files will be replicated to the same RSE.\nDATASET - All files in the same dataset will be replicated to the same RSE.\nNONE - Files will be completely spread over all allowed RSEs without any grouping considerations at all\n:\\<json int weight: Weighting scheme to be used.\n:\\<json int lifetime: The lifetime of the replication rule in seconds.\n:\\<json string locked: If the is locked.\n:\\<json string subscription_id: The subscription_id, if the rule is created by a subscription.\n:\\<json string source_replica_expression: Only use replicas as source from these RSEs.\n:\\<json string activity: Activity to be passed to the conveyor.\n:\\<json string notify: Notification setting of the rule ('Y', 'N', 'C'; None = 'N').\n:\\<json bool purge_replicas: Purge setting if a replica should be directly deleted after the rule is deleted.\n:\\<json bool ignore_availability: Option to ignore the availability of RSEs.\n:\\<json string comments: Comment about the rule.\n:\\<json bool ask_approval: Ask for approval for this rule.\n:\\<json bool asynchronous: Create replication rule asynchronously by the judge-injector.\n:\\<json int priority: Priority of the rule and the transfers which should be submitted.\n:\\<json bool split_container: Should a container rule be split into individual dataset rules.\n:\\<json string meta: Dictionary with metadata from the WFMS.\n:status 201: rule created\n:status 401: Invalid Auth Token\n:status 404: DID not found\n:status 409: Invalid Replication Rule\n:status 409: Duplicate Replication Rule\n:status 409: Insufficient Target RSEs\n:status 409: Insufficient Account Limit\n:status 409: Invalid RSE Expression\n:status 409: Replication Rule Creation Temporary Failed\n:status 409: Invalid Rule Weight\n:status 409: Staging Area Rule Requires Lifetime\n:status 409: Scratch Disk Lifetime Conflict\n:status 409: Manual Rule Approval Blocked\n:status 409: Invalid Object"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of ids for created rules"),Object(l.b)("a",{name:"rules.ReplicaLocks"}),"## ReplicaLocks Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class ReplicaLocks(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for replica locks."),Object(l.b)("a",{name:"rules.ReplicaLocks.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(rule_id)\n")),Object(l.b)("p",null,"get locks for a given rule_id."),Object(l.b)("p",null,".. :quickref: ReplicaLocks; get locks by rule id"),Object(l.b)("p",null,":status 200: Rule found\n:status 406: Not Acceptable"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"JSON dict containing informations about the requested user."),Object(l.b)("a",{name:"rules.ReduceRule"}),"## ReduceRule Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class ReduceRule(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for reducing rules."),Object(l.b)("a",{name:"rules.ReduceRule.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(rule_id)\n")),Object(l.b)("p",null,"Reduce a replication rule."),Object(l.b)("p",null,".. :quickref: ReduceRule; reduce rule"),Object(l.b)("p",null,":status 200: Rule found.\n:status 401: Invalid Auth Token.\n:status 404: no rule found for id.\n:status 409: Rule replace failed."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of rule ids"),Object(l.b)("a",{name:"rules.MoveRule"}),"## MoveRule Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class MoveRule(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for moving rules."),Object(l.b)("a",{name:"rules.MoveRule.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(rule_id)\n")),Object(l.b)("p",null,"Move a replication rule."),Object(l.b)("p",null,".. :quickref: MoveRule; move rule"),Object(l.b)("p",null,":status 200: Rule found\n:status 401: Invalid Auth Token\n:status 404: no rule found for id\n:status 409: Rule replace failed."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of rule ids."),Object(l.b)("a",{name:"rules.RuleHistory"}),"## RuleHistory Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class RuleHistory(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for rule history."),Object(l.b)("a",{name:"rules.RuleHistory.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(rule_id)\n")),Object(l.b)("p",null,"get history for a given rule_id."),Object(l.b)("p",null,".. :quickref: RuleHistory; get rule history by id"),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream\n:status 200: Rule found\n:status 406: Not Acceptable"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"JSON dict containing informations about the requested user."),Object(l.b)("a",{name:"rules.RuleHistoryFull"}),"## RuleHistoryFull Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class RuleHistoryFull(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for rule history for DIDs."),Object(l.b)("a",{name:"rules.RuleHistoryFull.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(scope_name)\n")),Object(l.b)("p",null,"get history for a given DID."),Object(l.b)("p",null,".. :quickref: RuleHistoryFull; get rule history for DID"),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:status 200: Rule found\n:status 406: Not Acceptable")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"JSON dict containing informations about the requested user."),Object(l.b)("a",{name:"rules.RuleAnalysis"}),"## RuleAnalysis Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class RuleAnalysis(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for rule analysis."),Object(l.b)("a",{name:"rules.RuleAnalysis.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(rule_id)\n")),Object(l.b)("p",null,"get analysis for given rule."),Object(l.b)("p",null,".. :quickref: RuleAnalysis; analyse rule,"),Object(l.b)("p",null,":resheader Content-Type: application/json\n:status 200: Rule found\n:status 406: Not Acceptable"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"JSON dict containing informations about the requested user."),Object(l.b)("a",{name:"rules.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"dids"}),"# dids",Object(l.b)("a",{name:"dids.Scope"}),"## Scope Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Scope(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.Scope.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(scope)\n")),Object(l.b)("p",null,"Return all data identifiers in the given scope."),Object(l.b)("p",null,".. :quickref: Scopes; List all dids for scope"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example request"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"GET /dids/scope1/?name=container1&recursive HTTP/1.1\nHost: rucio.cern.ch\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example response"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'HTTP/1.1 200 OK\nVary: Accept\nContent-Type: application/x-json-stream\n\n{"scope": "scope1", "type": "CONTAINER", "name": "container1",\n "parent": null, "level": 0}\n{"scope": "scope1", "type": "DATASET", "name": "dataset1", "parent":\n {"scope": "scope1", "name": "container1"}, "level": 1}\n{"scope": "scope1", "type": "FILE", "name": "file1", "parent":\n {"scope": "scope1", "name": "dataset1"}, "level": 2}\n')),Object(l.b)("p",null,":query name: specify a DID name\n:query recursive: flag to do a recursive search\n:resheader Content-Type: application/x-json-stream\n:status 200: DIDs found\n:status 401: Invalid Auth Token\n:status 404: no DIDs found in scope\n:status 406: Not Acceptable"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated dictionaries of DIDs"),Object(l.b)("a",{name:"dids.Search"}),"## Search Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Search(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.Search.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(scope)\n")),Object(l.b)("p",null,"List all data identifiers in a scope which match a given metadata."),Object(l.b)("p",null,".. :quickref: Search; Search DIDs in a scope with given metadata."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example request"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"GET /dids/scope1/dids/search?type=collection&long=True&length.lt=10 HTTP/1.1\nHost: rucio.cern.ch\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example response"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'HTTP/1.1 200 OK\nVary: Accept\nContent-Type: application/x-json-stream\n\n{"scope": "scope1", "did_type": "CONTAINER", "name": "container1",\n "bytes": 1234, "length": 1}\n{"scope": "scope1", "did_type": "DATASET", "name": "dataset1",\n "bytes": 234, "length": 3}\n')),Object(l.b)("p",null,":query type: specify a DID type to search for\n:query limit: The maximum number of DIDs returned.\n:query long: set to True for long output, otherwise only name\n:query recursive: set to True to recursively list DIDs content\n:query created_before: Date string in RFC-1123 format where the creation date was earlier\n:query created_after: Date string in RFC-1123 format where the creation date was later\n:query length: Exact number of attached DIDs\n:query length.gt: Number of attached DIDs greater than\n:query length.lt: Number of attached DIDs less than\n:query length.gte: Number of attached DIDs greater than or equal to\n:query length.lte: Number of attached DIDs less than or equal to\n:query name: Name or pattern of a DID name\n:resheader Content-Type: application/x-json-stream\n:status 200: DIDs found\n:status 401: Invalid Auth Token\n:status 404: Invalid key in filters\n:status 406: Not Acceptable\n:status 409: Wrong DID type"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated name of DIDs or dictionaries of DIDs for long option"),Object(l.b)("a",{name:"dids.SearchExtended"}),"## SearchExtended Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class SearchExtended(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.SearchExtended.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(scope)\n")),Object(l.b)("p",null,"List all data identifiers in a scope which match a given metadata.\nExtended Version to included meteadata from various plugins."),Object(l.b)("p",null,".. :quickref: Search; Search DIDs in a scope with given metadata."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example request"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"GET /dids/scope1/dids/search_extended?type=collection&long=True&length.lt=10 HTTP/1.1\nHost: rucio.cern.ch\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example response"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'HTTP/1.1 200 OK\nVary: Accept\nContent-Type: application/x-json-stream\n\n{"scope": "scope1", "did_type": "CONTAINER", "name": "container1",\n "bytes": 1234, "length": 1}\n{"scope": "scope1", "did_type": "DATASET", "name": "dataset1",\n "bytes": 234, "length": 3}\n')),Object(l.b)("p",null,":query type: specify a DID type to search for\n:query limit: The maximum number of DIDs returned.\n:query long: set to True for long output, otherwise only name\n:query recursive: set to True to recursively list DIDs content\n:query created_before: Date string in RFC-1123 format where the creation date was earlier\n:query created_after: Date string in RFC-1123 format where the creation date was later\n:query length: Exact number of attached DIDs\n:query length.gt: Number of attached DIDs greater than\n:query length.lt: Number of attached DIDs less than\n:query length.gte: Number of attached DIDs greater than or equal to\n:query length.lte: Number of attached DIDs less than or equal to\n:query name: Name or pattern of a DID name\n:resheader Content-Type: application/x-json-stream\n:status 200: DIDs found\n:status 401: Invalid Auth Token\n:status 404: Invalid key in filters\n:status 406: Not Acceptable\n:status 409: Wrong DID type"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated name of DIDs or dictionaries of DIDs for long option"),Object(l.b)("a",{name:"dids.BulkDIDS"}),"## BulkDIDS Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class BulkDIDS(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.BulkDIDS.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | post()\n")),Object(l.b)("p",null,"Add new DIDs in bulk."),Object(l.b)("p",null,".. :quickref: BulkDID; Bulk add DIDs."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"    **Example request**:\n")),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'POST /dids/ HTTP/1.1\nHost: rucio.cern.ch\n\n[\n  {"scope": "scope1", "type": "CONTAINER", "name": "container1",\n   "account": "jdoe", "length": 1},\n  {"scope": "scope1", "type": "DATASET", "name": "dataset1",\n   "account": "jdoe", "length": 3}\n]\n')),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example response"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"HTTP/1.1 201 Created\nVary: Accept\n")),Object(l.b)("p",null,":reqheader Accept: application/json\n:\\<json string scope: the new DID scope\n:\\<json string name: the new DID name\n:\\<json string type: the new DID type\n:\\<json string account: the owner account of the new DID\n:\\<json string statuses: monotonic\n:status 201: new DIDs created\n:status 401: Invalid Auth Token\n:status 406: Not Acceptable\n:status 409: DID already exists"),Object(l.b)("a",{name:"dids.Attachments"}),"## Attachments Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Attachments(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.Attachments.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Attach DIDs to DIDs"),Object(l.b)("p",null,".. :quickref: Attachements; Attach DIDs to DIDs."),Object(l.b)("a",{name:"dids.DIDs"}),"## DIDs Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class DIDs(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.DIDs.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(scope_name)\n")),Object(l.b)("p",null,"Retrieve a single data identifier."),Object(l.b)("p",null,".. :quickref: DIDs; Retrieve a single DID."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example request"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"GET /dids/scope1/dataset1?dynamic HTTP/1.1\nHost: rucio.cern.ch\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example response"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'HTTP/1.1 200 OK\nVary: Accept\nContent-Type: application/json\n\n{"scope": "scope1", "did_type": "DATASET", "name": "dataset1",\n "bytes": 234, "length": 3, "account": "jdoe", "open": True,\n "monotonic": False, "expired_at": null}\n')),Object(l.b)("p",null,":query dynamic: Flag to dynamically calculate size for open DIDs\n:resheader Content-Type: application/json\n:status 200: DID found\n:status 401: Invalid Auth Token\n:status 404: Scope not found\n:status 406: Not Acceptable."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Dictionary with DID metadata"),Object(l.b)("a",{name:"dids.DIDs.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(scope_name)\n")),Object(l.b)("p",null,"Create a new data identifier."),Object(l.b)("p",null,".. :quickref: DIDs; Create a new DID."),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'POST /dids/scope1/container1 HTTP/1.1\nHost: rucio.cern.ch\n\n{"type": "CONTAINER", "lifetime": 86400},\n')),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example response"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"HTTP/1.1 201 Created\nVary: Accept\n")),Object(l.b)("p",null,":reqheader Accept: application/json"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:\\<json string type: the new DID type\n:\\<json dict statuses: Dictionary with statuses, e.g. {'monotonic':True}\n:\\<json dict meta: Dictionary with metadata, e.g. {'length':1234}\n:\\<json dict rules: Replication rules associated with the did. e.g., ","[{'copies': 2, 'rse_expression': 'TIERS1'}, ]","\n:\\<json int lifetime: DID's liftime in seconds.\n:\\<json list dids: The content.\n:\\<json string rse: The RSE name when registering replicas.\n:status 201: new DIDs created\n:status 401: Invalid Auth Token\n:status 409: DID already exists")),Object(l.b)("a",{name:"dids.DIDs.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(scope_name)\n")),Object(l.b)("p",null,"Update data identifier status."),Object(l.b)("p",null,".. :quickref: DIDs; Update DID status."),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'PUT /dids/scope1/container1 HTTP/1.1\nHost: rucio.cern.ch\n\n{"open": False},\n')),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example response"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"HTTP/1.1 200 OK\nVary: Accept\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:\\<json bool open: open or close did\n:status 200: DIDs successfully updated\n:status 401: Invalid Auth Token\n:status 404: DID not found\n:status 409: Wrong status")),Object(l.b)("a",{name:"dids.Attachment"}),"## Attachment Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Attachment(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.Attachment.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(scope_name)\n")),Object(l.b)("p",null,"Returns the contents of a data identifier."),Object(l.b)("p",null,".. :quickref: Attachement; Get DID contents."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example request"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"GET /dids/scope1/dataset1 HTTP/1.1\nHost: rucio.cern.ch\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example response"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'HTTP/1.1 200 OK\nVary: Accept\nContent-Type: application/json\n\n{"scope": "scope1", "did_type": "DATASET", "name": "dataset1",\n "bytes": 234, "length": 3, "account": "jdoe", "open": True,\n "monotonic": False, "expired_at": null}\n')),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream\n:status 200: DID found\n:status 401: Invalid Auth Token\n:status 404: Scope not found\n:status 406: Not Acceptable"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Dictionary with DID metadata"),Object(l.b)("a",{name:"dids.Attachment.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(scope_name)\n")),Object(l.b)("p",null,"Append data identifiers to data identifiers."),Object(l.b)("p",null,".. :quickref: Attachment; Append DID to DID."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example request"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'POST /dids/scope1/datasets1/dids HTTP/1.1\nHost: rucio.cern.ch\n\n[{"scope": "scope1", "name": "file1"},\n {"scope": "scope1", "name": "file2"},\n {"scope": "scope1", "name": "file3"}]\n')),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example response"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"HTTP/1.1 201 Created\nVary: Accept\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:\\<json list attachments: List of dicts of DIDs to attach.\n:status 201: DIDs successfully attached\n:status 401: Invalid Auth Token\n:status 404: DID not found\n:status 409: DIDs already attached")),Object(l.b)("a",{name:"dids.Attachment.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(scope_name)\n")),Object(l.b)("p",null,"Detach data identifiers from data identifiers."),Object(l.b)("p",null,".. :quickref: DIDs; Detach DID from DID."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:\\<json dicts data: Must contain key 'dids' with list of dids to detach.\n:status 200: DIDs successfully detached\n:status 401: Invalid Auth Token\n:status 404: DID not found")),Object(l.b)("a",{name:"dids.AttachmentHistory"}),"## AttachmentHistory Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class AttachmentHistory(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.AttachmentHistory.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(scope_name)\n")),Object(l.b)("p",null,"Returns the contents history of a data identifier."),Object(l.b)("p",null,".. :quickref: AttachementHistory; List the content history of a DID."),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:status 200: DID found\n:status 401: Invalid Auth Token\n:status 404: DID not found\n:status 406: Not Acceptable")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Stream of dictionarys with DIDs"),Object(l.b)("a",{name:"dids.Files"}),"## Files Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Files(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.Files.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(scope_name)\n")),Object(l.b)("p",null,"List all replicas of a data identifier."),Object(l.b)("p",null,".. :quickref: Files; List replicas of DID."),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:query long: Flag to trigger long output\n:status 200: DID found\n:status 401: Invalid Auth Token\n:status 404: DID not found\n:status 406: Not Acceptable")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A dictionary containing all replicas information."),Object(l.b)("a",{name:"dids.Parents"}),"## Parents Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Parents(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.Parents.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(scope_name)\n")),Object(l.b)("p",null,"List all parents of a data identifier."),Object(l.b)("p",null,".. :quickref: Parents; List parents of DID."),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:status 200: DID found\n:status 401: Invalid Auth Token\n:status 404: DID not found\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list of dictionary containing all dataset information."),Object(l.b)("a",{name:"dids.Meta"}),"## Meta Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Meta(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.Meta.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(scope_name)\n")),Object(l.b)("p",null,"List all meta of a data identifier."),Object(l.b)("p",null,".. :quickref: Meta; List DID metadata."),Object(l.b)("p",null,":resheader Content-Type: application/json"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:status 200: DID found\n:status 401: Invalid Auth Token\n:status 404: DID not found\n:status 406: Not Acceptable")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A dictionary containing all meta."),Object(l.b)("a",{name:"dids.Meta.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(scope_name)\n")),Object(l.b)("p",null,"Add metadata to a data identifier in bulk."),Object(l.b)("p",null,".. :quickref: Meta; Add DID metadata."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:status 201: Metadata created.\n:status 400: Invalid input data.\n:status 404: DID not found.\n:status 409: Duplicate.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Created"),Object(l.b)("a",{name:"dids.Meta.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(scope_name)\n")),Object(l.b)("p",null,"Deletes the specified metadata from the DID"),Object(l.b)("p",null,".. :quickref: Meta; Delete DID metadata."),Object(l.b)("p",null,"HTTP Success:\n200 OK"),Object(l.b)("p",null,"HTTP Error:\n401 Unauthorized\n404 KeyNotFound"),Object(l.b)("a",{name:"dids.SingleMeta"}),"## SingleMeta Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class SingleMeta(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.SingleMeta.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(scope_name, key)\n")),Object(l.b)("p",null,"Add metadata to a data identifier."),Object(l.b)("p",null,".. :quickref: SingleMeta; Add DID metadata."),Object(l.b)("p",null,"HTTP Success:\n201 Created"),Object(l.b)("p",null,"HTTP Error:\n400 Bad Request\n401 Unauthorized\n404 Not Found\n409 Conflict\n500 Internal Error"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name)."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"key"),": the key.")),Object(l.b)("a",{name:"dids.BulkDIDsMeta"}),"## BulkDIDsMeta Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class BulkDIDsMeta(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.BulkDIDsMeta.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Set metadata on a list of data identifiers."),Object(l.b)("p",null,".. :quickref: BulkDIDsMeta; Set metadata to multiple DIDs"),Object(l.b)("p",null,":status 201: Created\n:status 400: Bad Request\n:status 401: Unauthorized\n:status 404: DataIdentifierNotFound"),Object(l.b)("a",{name:"dids.Rules"}),"## Rules Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Rules(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.Rules.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(scope_name)\n")),Object(l.b)("p",null,"Return all rules of a given DID."),Object(l.b)("p",null,".. :quickref: Rules; List rules of DID."),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:status 200: DID found\n:status 401: Invalid Auth Token\n:status 404: DID not found\n:status 406: Not Acceptable")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of replication rules."),Object(l.b)("a",{name:"dids.BulkMeta"}),"## BulkMeta Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class BulkMeta(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.BulkMeta.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | post()\n")),Object(l.b)("p",null,"List all meta of a list of data identifiers."),Object(l.b)("p",null,".. :quickref: Meta; List metadata of multiple DIDs"),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream\n:status 200: OK\n:status 400: Bad Request\n:status 401: Unauthorized\n:status 404: DataIdentifierNotFound"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list of dictionaries containing all meta."),Object(l.b)("a",{name:"dids.AssociatedRules"}),"## AssociatedRules Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class AssociatedRules(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.AssociatedRules.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(scope_name)\n")),Object(l.b)("p",null,"Return all associated rules of a file."),Object(l.b)("p",null,".. :quickref: AssociatedRules; List associated rules of DID."),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:status 200: DID found\n:status 401: Invalid Auth Token\n:status 404: DID not found\n:status 406: Not Acceptable")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of associated rules."),Object(l.b)("a",{name:"dids.GUIDLookup"}),"## GUIDLookup Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class GUIDLookup(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.GUIDLookup.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(guid)\n")),Object(l.b)("p",null,"Return the file associated to a GUID."),Object(l.b)("p",null,".. :quickref: GUIDLookup; List file by GUID."),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"guid"),": the GUID to query by.\n:status 200: DID found\n:status 401: Invalid Auth Token\n:status 404: DID not found\n:status 406: Not Acceptable")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of files for given GUID"),Object(l.b)("a",{name:"dids.Sample"}),"## Sample Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Sample(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.Sample.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(input_scope, input_name, output_scope, output_name, nbfiles)\n")),Object(l.b)("p",null,"Return the file associated to a GUID."),Object(l.b)("p",null,".. :quickref: Sample; Create a sample DID."),Object(l.b)("p",null,"HTTP Success:\n201 Created"),Object(l.b)("p",null,"HTTP Error:\n401 Unauthorized\n404 Not Found\n409 Conflict\n500 Internal Error"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"input_scope"),": The scope of the input DID."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"input_name"),": The name of the input DID."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"output_scope"),": The scope of the output dataset."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"output_name"),": The name of the output dataset."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"nbfiles"),": The number of files to register in the output dataset.")),Object(l.b)("a",{name:"dids.NewDIDs"}),"## NewDIDs Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class NewDIDs(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.NewDIDs.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get()\n")),Object(l.b)("p",null,"Returns list of recent identifiers."),Object(l.b)("p",null,".. :quickref: NewDIDs; List recent DIDs."),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream\n:query type: the DID type.\n:status 200: DIDs found\n:status 401: Invalid Auth Token\n:status 406: Not Acceptable"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List recently created DIDs."),Object(l.b)("a",{name:"dids.Resurrect"}),"## Resurrect Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Resurrect(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.Resurrect.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Resurrect DIDs."),Object(l.b)("p",null,".. :quickref: Resurrect; Resurrect DID."),Object(l.b)("p",null,"HTTP Success:\n201 Created"),Object(l.b)("p",null,"HTTP Error:\n401 Unauthorized\n404 Not Found\n409 Conflict\n500 Internal Error"),Object(l.b)("a",{name:"dids.Follow"}),"## Follow Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Follow(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dids.Follow.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(scope_name)\n")),Object(l.b)("p",null,"Return all users following a specific DID."),Object(l.b)("p",null,".. :quickref: Follow; List users following DID."),Object(l.b)("p",null,":status 200: OK\n:status 400: ValueError\n:status 401: Unauthorized\n:status 404: DataIdentifierNotFound\n:status 406: Not Acceptable"),Object(l.b)("a",{name:"dids.Follow.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(scope_name)\n")),Object(l.b)("p",null,"Mark the input DID as being followed by the given account."),Object(l.b)("p",null,".. :quickref: Follow; Follow DID."),Object(l.b)("p",null,"HTTP Success:\n201 Created"),Object(l.b)("p",null,"HTTP Error:\n401 Unauthorized\n404 Not Found\n500 Internal Error"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).")),Object(l.b)("a",{name:"dids.Follow.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(scope_name)\n")),Object(l.b)("p",null,"Mark the input DID as not followed"),Object(l.b)("p",null,".. :quickref: Follow; Unfollow DID."),Object(l.b)("p",null,"HTTP Success:\n200 OK"),Object(l.b)("p",null,"HTTP Error:\n401 Unauthorized\n500 InternalError"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).")),Object(l.b)("a",{name:"dids.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"identities"}),"# identities",Object(l.b)("a",{name:"identities.UserPass"}),"## UserPass Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class UserPass(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Manage a username/password identity for an account."),Object(l.b)("a",{name:"identities.UserPass.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(account)\n")),Object(l.b)("p",null,"Create a new identity and map it to an account."),Object(l.b)("p",null,".. :quickref: UserPass; add new userpass identity."),Object(l.b)("p",null,":reqheader X-Rucio-Username: the desired username.\n:reqheader X-Rucio-Password: the desired password.\n:reqheader X-Rucio-Email: the desired email."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": the affected account.\n:status 201: Created.\n:status 400: Missing username or password.\n:status 401: Invalid Auth Token.")),Object(l.b)("a",{name:"identities.X509"}),"## X509 Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class X509(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Manage an x509 identity for an account."),Object(l.b)("a",{name:"identities.X509.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(account)\n")),Object(l.b)("p",null,"Create a new identity and map it to an account."),Object(l.b)("p",null,".. :quickref: X509; add new x509 identity."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": the affected account.\n:reqheader X-Rucio-Email: the desired email.\n:status 201: Created.\n:status 401: Invalid Auth Token.")),Object(l.b)("a",{name:"identities.GSS"}),"## GSS Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class GSS(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Manage a GSS identity for an account."),Object(l.b)("a",{name:"identities.GSS.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(account)\n")),Object(l.b)("p",null,"Create a new identity and map it to an account."),Object(l.b)("p",null,".. :quickref: GSS; add new GSS identity."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": the affected account.\n:reqheader X-Rucio-Email: the desired email.\n:status 201: Created.\n:status 401: Invalid Auth Token.")),Object(l.b)("a",{name:"identities.Accounts"}),"## Accounts Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Accounts(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Retrieve list of accounts mapped to an identity."),Object(l.b)("a",{name:"identities.Accounts.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(identity_key, type)\n")),Object(l.b)("p",null,"Return all identities mapped to an account."),Object(l.b)("p",null,".. :quickref: Accounts; list account identities."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"identity_key"),": Identity string."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"type"),": Identity type.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of identities."),Object(l.b)("a",{name:"identities.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"import"}),"# import",Object(l.b)("a",{name:"import.Import"}),"## Import Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Import(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Import data."),Object(l.b)("a",{name:"import.Import.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Import data into Rucio."),Object(l.b)("p",null,".. :quickref: Import data into Rucio."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example request"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'POST /import HTTP/1.1\nHost: rucio.cern.ch\n\n{\n    "rses": [{"rse": "MOCK", "rse_type": "TAPE"}]\n}\n')),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example response"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"HTTP/1.1 201 OK\nVary: Accept\n\nCreated\n")),Object(l.b)("p",null,":status 200: DIDs found\n:status 401: Invalid Auth Token"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"dictionary with rucio data"),Object(l.b)("a",{name:"import.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation to add the prefix"),Object(l.b)("a",{name:"common"}),"# common",Object(l.b)("a",{name:"common.ErrorHandlingMethodView"}),"## ErrorHandlingMethodView Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class ErrorHandlingMethodView(MethodView)\n")),Object(l.b)("p",null,"Special MethodView that handles generic RucioExceptions and more generic\nExceptions for all defined methods automatically."),Object(l.b)("a",{name:"common.ErrorHandlingMethodView.get_headers"}),"#### get\\_headers",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},' | get_headers() -\\> "Optional[HeadersType]"\n')),Object(l.b)("p",null,"Can be overridden to add headers to generic error responses."),Object(l.b)("a",{name:"common.check_accept_header_wrapper_flask"}),"#### check\\_accept\\_header\\_wrapper\\_flask",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"check_accept_header_wrapper_flask(supported_content_types)\n")),Object(l.b)("p",null,"Decorator to check if an endpoint supports the requested content type."),Object(l.b)("a",{name:"common.parse_scope_name"}),"#### parse\\_scope\\_name",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"parse_scope_name(scope_name, vo)\n")),Object(l.b)("p",null,"Parses the given scope_name according to the schema's\nSCOPE_NAME_REGEXP and returns a (scope, name) tuple."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": the scope_name string to be parsed."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"vo"),": the vo currently in use.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Raises"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ValueError"),": when scope_name could not be parsed.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"a (scope, name) tuple."),Object(l.b)("a",{name:"common.try_stream"}),"#### try\\_stream",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'try_stream(generator, content_type=None) -\\> "flask.Response"\n')),Object(l.b)("p",null,"Peeks at the first element of the passed generator and raises\nan error, if yielding raises. Otherwise returns\na flask.Response object."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"generator"),": a generator function or an iterator."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"content_type"),": the response's Content-Type.\n'application/x-json-stream' by default.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"a response object with the specified Content-Type."),Object(l.b)("a",{name:"common.generate_http_error_flask"}),"#### generate\\_http\\_error\\_flask",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'generate_http_error_flask(status_code: "int", exc: "Union[str, BaseException]", exc_msg: "Optional[str]" = None, headers: "Optional[HeadersType]" = None) -\\> "flask.Response"\n')),Object(l.b)("p",null,"Utitily function to generate a complete HTTP error response."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"status_code"),": The HTTP status code to generate a response for."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"exc"),": The name of the exception class or a RucioException object."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"exc_msg"),": The error message."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"headers"),": any default headers to send along.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"a response object representing the error."),Object(l.b)("a",{name:"common.json_parameters"}),"#### json\\_parameters",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'json_parameters(json_loads: "Callable[[str], Any]" = json.loads, optional: "bool" = False) -\\> "Dict"\n')),Object(l.b)("p",null,"Returns the JSON parameters from the current request's body as dict."),Object(l.b)("a",{name:"common.json_list"}),"#### json\\_list",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'json_list(json_loads: "Callable[[str], Any]" = json.loads, optional: "bool" = False) -\\> "List"\n')),Object(l.b)("p",null,"Returns the JSON array from the current request's body as list."),Object(l.b)("a",{name:"common.extract_vo"}),"#### extract\\_vo",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'extract_vo(headers: "HeadersType") -\\> "str"\n')),Object(l.b)("p",null,"Extract the VO name from the given request.headers object and\ndoes any name mapping. Returns the short VO name or raise a\nflask.abort if the VO name doesn't meet the name specification."),Object(l.b)("p",null,":papam headers: The request.headers object for the current request."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"a string containing the short VO name."),Object(l.b)("a",{name:"subscriptions"}),"# subscriptions",Object(l.b)("a",{name:"subscriptions.Subscription"}),"## Subscription Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Subscription(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for subscriptions."),Object(l.b)("a",{name:"subscriptions.Subscription.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(account=None, name=None)\n")),Object(l.b)("p",null,"Retrieve a subscription."),Object(l.b)("p",null,".. :quickref: Subscription; Get subscriptions."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"name"),": The subscription name.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: Subscription Not Found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated list of dictionaries with subscription information."),Object(l.b)("a",{name:"subscriptions.Subscription.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(account, name)\n")),Object(l.b)("p",null,"Update an existing subscription."),Object(l.b)("p",null,".. :quickref: Subscription; Update a subscription."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"name"),": The subscription name.\n:status 201: Created.\n:status 400: Cannot decode json parameter list.\n:status 401: Invalid Auth Token.\n:status 404: Subscription Not Found.")),Object(l.b)("a",{name:"subscriptions.Subscription.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(account, name)\n")),Object(l.b)("p",null,"Create a new subscription."),Object(l.b)("p",null,".. :quickref: Subscription; Create a subscription."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"name"),": The subscription name.\n:status 201: Created.\n:status 400: Cannot decode json parameter list.\n:status 401: Invalid Auth Token.\n:status 404: Subscription Not Found.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"ID if newly created subscription."),Object(l.b)("a",{name:"subscriptions.SubscriptionName"}),"## SubscriptionName Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class SubscriptionName(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"subscriptions.SubscriptionName.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(name=None)\n")),Object(l.b)("p",null,"Retrieve a subscription by name."),Object(l.b)("p",null,".. :quickref: SubscriptionName; Get subscriptions by name."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"name"),": The subscription name.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: Subscription Not Found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated list of dictionaries with subscription information."),Object(l.b)("a",{name:"subscriptions.Rules"}),"## Rules Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Rules(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"subscriptions.Rules.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(account, name)\n")),Object(l.b)("p",null,"Return all rules of a given subscription id."),Object(l.b)("p",null,".. :quickref: Rules; Get subscription rules."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"name"),": The subscription name.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: Rule Not Found.\n:status 404: Subscription Not Found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated list of dictionaries with rule information."),Object(l.b)("a",{name:"subscriptions.States"}),"## States Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class States(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"subscriptions.States.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(account, name=None)\n")),Object(l.b)("p",null,"Return a summary of the states of all rules of a given subscription id."),Object(l.b)("p",null,".. :quickref: States; Get subscription rule states."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"name"),": The subscription name.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated list of dictionaries with rule information."),Object(l.b)("a",{name:"subscriptions.SubscriptionId"}),"## SubscriptionId Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class SubscriptionId(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"subscriptions.SubscriptionId.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(subscription_id)\n")),Object(l.b)("p",null,"Retrieve a subscription matching the given subscription id"),Object(l.b)("p",null,".. :quickref: SubscriptionId; Get a subscription by ID."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"subscription_id"),": The subscription id.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: Subscription Not Found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"dictionary with subscription information."),Object(l.b)("a",{name:"subscriptions.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"traces"}),"# traces",Object(l.b)("a",{name:"traces.Trace"}),"## Trace Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Trace(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"traces.Trace.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Trace endpoint used by the pilot and CLI clients to post data access information."),Object(l.b)("p",null,".. :quickref: Trace; Send trace."),Object(l.b)("p",null,":\\<json dict payload: Dictionary contain the trace information.\n:status 201: Created.\n:status 400: Cannot decode json data."),Object(l.b)("a",{name:"traces.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"config"}),"# config",Object(l.b)("a",{name:"config.Config"}),"## Config Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Config(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST API for full configuration."),Object(l.b)("a",{name:"config.Config.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get()\n")),Object(l.b)("p",null,"List full configuration."),Object(l.b)("p",null,".. :quickref: Config; List full config."),Object(l.b)("p",null,":resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 406: Not Acceptable."),Object(l.b)("a",{name:"config.Config.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,'Create or set the configuration option in the requested section.\nThe request body is expected to contain a json {"section": {"option": "value"}}.'),Object(l.b)("p",null,".. :quickref: Config; set config value"),Object(l.b)("p",null,":status 201: Option successfully created or updated.\n:status 400: The input data is invalid or incomplete.\n:status 401: Invalid Auth Token.\n:status 500: Configuration Error."),Object(l.b)("a",{name:"config.Section"}),"## Section Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Section(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST API for the sections in the configuration."),Object(l.b)("a",{name:"config.Section.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(section)\n")),Object(l.b)("p",null,"List configuration of a section"),Object(l.b)("p",null,".. :quickref: Section; List config section."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"section"),": The section name.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: Config not found.\n:status 406: Not Acceptable.")),Object(l.b)("a",{name:"config.OptionGetDel"}),"## OptionGetDel Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class OptionGetDel(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST API for reading or deleting the options in the configuration."),Object(l.b)("a",{name:"config.OptionGetDel.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(section, option)\n")),Object(l.b)("p",null,"Retrieve the value of an option."),Object(l.b)("p",null,".. :quickref: OptionGetDel; get config value."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"section"),": The section name.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: Config not found.\n:status 406: Not Acceptable.")),Object(l.b)("a",{name:"config.OptionGetDel.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(section, option)\n")),Object(l.b)("p",null,"Delete an option."),Object(l.b)("p",null,".. :quickref: OptionGetDel; delete an option."),Object(l.b)("p",null,":status 200: OK.\n:status 401: Invalid Auth Token."),Object(l.b)("a",{name:"config.OptionSet"}),"## OptionSet Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class OptionSet(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST API for setting the options in the configuration."),Object(l.b)("a",{name:"config.OptionSet.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(section, option, value)\n")),Object(l.b)("p",null,"Set the value of an option.\nIf the option does not exist, create it."),Object(l.b)("p",null,".. :quickref: OptionSet; set config value."),Object(l.b)("p",null,":status 201: Option successfully created or updated.\n:status 401: Invalid Auth Token."),Object(l.b)("a",{name:"config.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"ping"}),"# ping",Object(l.b)("a",{name:"ping.Ping"}),"## Ping Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Ping(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"ping.Ping.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get()\n")),Object(l.b)("p",null,"Ping the server and retrieve the server version."),Object(l.b)("p",null,".. :quickref: Ping; Ping the server."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example request"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"GET /ping HTTP/1.1\nHost: rucio-server.com\nAccept: application/json\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example response"),":"),Object(l.b)("p",null,".. sourcecode:: http"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'HTTP/1.1 200 OK\nVary: Accept\nContent-Type: application/json\n\n{"version": "1.15.0"}\n')),Object(l.b)("p",null,":status 200: OK.\n:status 406: Not Acceptable."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"JSON dictionary with the version."),Object(l.b)("a",{name:"ping.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation to add the prefix"),Object(l.b)("a",{name:"dirac"}),"# dirac",Object(l.b)("a",{name:"dirac.AddFiles"}),"## AddFiles Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class AddFiles(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"dirac.AddFiles.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Atomic method used by the RucioFileCatalog plugin in Dirac that :"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Creates files and their replicas"),Object(l.b)("li",{parentName:"ul"},"Creates the dataset containing the files and attach the files to the dataset"),Object(l.b)("li",{parentName:"ul"},"Creates a rule on the dataset with RSE expression ANY and grouping NONE"),Object(l.b)("li",{parentName:"ul"},"Creates all the container hierarchy containing the dataset")),Object(l.b)("p",null,"..:quickref: AddFiles; Method used by the RucioFileCatalog plugin in Dirac."),Object(l.b)("p",null,":\\<json list lfns: List of lfn (dictionary {'lfn': \\<lfn",">",", 'rse': \\<rse",">",", 'bytes': \\<bytes",">",", 'adler32': \\<adler32",">",", 'guid': \\<guid",">",", 'pfn': \\<pfn",">","}.\n:\\<json bool ignore_availability: A boolean to choose if unavailable sites need to be ignored."),Object(l.b)("p",null,":status 201: Created.\n:status 400: Cannot decode json parameter list.\n:status 401: Invalid auth token.\n:status 404: DID not found.\n:status 405: Unsupported Operation.\n:status 409: Duplicate.\n:status 503: Temporary error."),Object(l.b)("a",{name:"dirac.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"requests"}),"# requests",Object(l.b)("a",{name:"requests.RequestGet"}),"## RequestGet Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class RequestGet(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST API to get requests."),Object(l.b)("a",{name:"requests.RequestGet.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(scope_name, rse)\n")),Object(l.b)("p",null,"List request for given DID to a destination RSE."),Object(l.b)("p",null,".. :quickref: RequestGet; list requests"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name)."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": destination RSE.\n:reqheader Content-Type: application/json\n:status 200: Request found.\n:status 404: Request not found.\n:status 406: Not Acceptable.")),Object(l.b)("a",{name:"requests.RequestList"}),"## RequestList Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class RequestList(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST API to get requests."),Object(l.b)("a",{name:"requests.RequestList.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get()\n")),Object(l.b)("p",null,"List requests for a given source and destination RSE or site."),Object(l.b)("p",null,".. :quickref: RequestsGet; list requests"),Object(l.b)("p",null,":reqheader Content-Type: application/x-json-stream\n:status 200: Request found.\n:status 404: Request not found.\n:status 406: Not Acceptable."),Object(l.b)("a",{name:"requests.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"main"}),"# main",Object(l.b)("a",{name:"nongrid_traces"}),"# nongrid\\_traces",Object(l.b)("a",{name:"nongrid_traces.XAODTrace"}),"## XAODTrace Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class XAODTrace(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"nongrid_traces.XAODTrace.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Trace endpoint used by the XAOD framework to post data access information."),Object(l.b)("p",null,".. :quickref: XAODTrace; Send XAOD trace."),Object(l.b)("p",null,":\\<json dict payload: Dictionary contain the trace information.\n:status 201: Created.\n:status 400: Cannot decode json data."),Object(l.b)("a",{name:"nongrid_traces.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"vos"}),"# vos",Object(l.b)("a",{name:"vos.VOs"}),"## VOs Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class VOs(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"List all the VOs in the database."),Object(l.b)("a",{name:"vos.VOs.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get()\n")),Object(l.b)("p",null,"List all VOs."),Object(l.b)("p",null,".. :quickref: VOs; List all VOs."),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream\n:status 200: VOs found.\n:status 401: Invalid Auth Token.\n:status 409: Unsupported operation."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list containing all VOs."),Object(l.b)("a",{name:"vos.VO"}),"## VO Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class VO(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Add and update a VO."),Object(l.b)("a",{name:"vos.VO.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(vo)\n")),Object(l.b)("p",null,"Add a VO with a given name."),Object(l.b)("p",null,".. :quickref: VO; Add a VOs."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"vo"),": VO to be added.\n:\\<json string description: Desciption of VO.\n:\\<json string email: Admin email for VO.\n:status 201: VO created successfully.\n:status 401: Invalid Auth Token.\n:status 409: Unsupported operation.")),Object(l.b)("a",{name:"vos.VO.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(vo)\n")),Object(l.b)("p",null,"Update the details for a given VO"),Object(l.b)("p",null,".. :quickref: VO; Update a VOs."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"vo"),": VO to be updated.\n:\\<json string description: Desciption of VO.\n:\\<json string email: Admin email for VO.\n:status 200: VO updated successfully.\n:status 401: Invalid Auth Token.\n:status 404: VO not found.\n:status 409: Unsupported operation.")),Object(l.b)("a",{name:"vos.RecoverVO"}),"## RecoverVO Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class RecoverVO(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Recover root identity for a VO."),Object(l.b)("a",{name:"vos.RecoverVO.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(vo)\n")),Object(l.b)("p",null,"Recover root identity for a given VO"),Object(l.b)("p",null,".. :quickref: RecoverVO; Recover VO root identity."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"vo"),": VO to be recovered.\n:\\<json string identity: Identity key to use.\n:\\<json string authtype: Type of identity.\n:\\<json string email: Admin email for VO.\n:\\<json string email: Password for identity.\n:\\<json bool default: Whether to use identity as account default.\n:status 201: VO recovered successfully.\n:status 401: Invalid Auth Token.\n:status 404: Account not found.\n:status 409: Unsupported operation.")),Object(l.b)("a",{name:"vos.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"tmp_dids"}),"# tmp\\_dids",Object(l.b)("a",{name:"tmp_dids.BulkDIDS"}),"## BulkDIDS Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class BulkDIDS(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"tmp_dids.BulkDIDS.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Bulk add temporary data identifiers."),Object(l.b)("p",null,".. :quickref: BulkDIDS; Bulk add temporary dids."),Object(l.b)("p",null,":\\<json list dids: A list of dids.\n:status 201: Created.\n:status 400: Cannot decode json parameter list.\n:status 401: Invalid Auth Token."),Object(l.b)("a",{name:"tmp_dids.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"meta"}),"# meta",Object(l.b)("a",{name:"meta.Meta"}),"## Meta Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Meta(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for data identifier attribute keys."),Object(l.b)("a",{name:"meta.Meta.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get()\n")),Object(l.b)("p",null,"List all data identifier keys."),Object(l.b)("p",null,".. :quickref: Meta; List all keys."),Object(l.b)("p",null,":resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 406: Not Acceptable."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of all DID keys."),Object(l.b)("a",{name:"meta.Meta.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(key)\n")),Object(l.b)("p",null,"Create a new allowed key (value is NULL)."),Object(l.b)("p",null,".. :quickref: Meta; Create new key."),Object(l.b)("p",null,":\\<json dict parameter: Dictionary with 'value_type', 'value_regexp' and 'key_type'.\n:status 201: Created.\n:status 400: Cannot decode json parameter list.\n:status 400: Unsupported Value Type.\n:status 401: Invalid Auth Token.\n:status 409: Key already exists."),Object(l.b)("a",{name:"meta.Values"}),"## Values Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Values(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for data identifier attribute values."),Object(l.b)("a",{name:"meta.Values.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(key)\n")),Object(l.b)("p",null,"List all values for a key."),Object(l.b)("p",null,".. :quickref: Values; List all key values."),Object(l.b)("p",null,":resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 406: Not Acceptable."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of all key values."),Object(l.b)("a",{name:"meta.Values.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(key)\n")),Object(l.b)("p",null,"Create a new value for a key."),Object(l.b)("p",null,".. :quickref: Values; Create new value."),Object(l.b)("p",null,":\\<json dict parameter: Dictionary with 'value'.\n:status 201: Created.\n:status 400: Cannot decode json parameter list.\n:status 400: Invalid Value For Key.\n:status 401: Invalid Auth Token.\n:status 404: Key Not Found.\n:status 409: Value already exists."),Object(l.b)("a",{name:"meta.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"accounts"}),"# accounts",Object(l.b)("a",{name:"accounts.Attributes"}),"## Attributes Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Attributes(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"accounts.Attributes.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(account)\n")),Object(l.b)("p",null,"list all attributes for an account."),Object(l.b)("p",null,".. :quickref: Attributes; list account attributes."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account identifier.\n:resheader Content-Type: application/json\n:status 200: OK\n:status 401: Invalid auth token.\n:status 404: Account not found.\n:status 406: Not Acceptable")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"JSON dict containing informations about the requested account."),Object(l.b)("a",{name:"accounts.Attributes.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(account, key)\n")),Object(l.b)("p",null,"Add attributes to an account."),Object(l.b)("p",null,".. :quickref: Attributes; Add account attribute"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": Account identifier."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"key"),": The attribute key.\n:\\<json string key: The attribute key.\n:\\<json string value: The attribute value.\n:status 201: Successfully created.\n:status 401: Invalid auth token.\n:status 409: Attribute already exists.\n:status 404: Account not found.")),Object(l.b)("a",{name:"accounts.Attributes.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(account, key)\n")),Object(l.b)("p",null,"Remove attribute from account."),Object(l.b)("p",null,".. :quickref: Attributes; Delete account attribute"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": Account identifier."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"key"),": The attribute key.\n:status 200: Successfully deleted.\n:status 401: Invalid auth token.\n:status 404: Account not found.")),Object(l.b)("a",{name:"accounts.Scopes"}),"## Scopes Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Scopes(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"accounts.Scopes.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(account)\n")),Object(l.b)("p",null,"list all scopes for an account."),Object(l.b)("p",null,".. :quickref: Scopes; List scope for account."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account identifier.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 404: Account not found.\n:status 404: Scope not found.\n:statsu 406: Not Acceptable")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list containing all scope names for an account."),Object(l.b)("a",{name:"accounts.Scopes.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(account, scope)\n")),Object(l.b)("p",null,"create scope with given scope name."),Object(l.b)("p",null,".. :quickref: Scope; Add to account."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account identifier."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope"),": The scope to be added.\n:status 201: Successfully added.\n:status 401: Invalid auth token.\n:status 404: Account not found.\n:status 409: Scope already exists.")),Object(l.b)("a",{name:"accounts.AccountParameter"}),"## AccountParameter Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class AccountParameter(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"create, update, get and disable rucio accounts."),Object(l.b)("a",{name:"accounts.AccountParameter.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(account)\n")),Object(l.b)("p",null,"get account parameters for given account name."),Object(l.b)("p",null,".. :quickref: AccountParameter; Get account parameters."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account identifier.\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 404: Account not found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"JSON dict containing informations about the requested user."),Object(l.b)("a",{name:"accounts.AccountParameter.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(account)\n")),Object(l.b)("p",null,"update a parameter for a given account name"),Object(l.b)("p",null,".. :quickref: AccountParameter; Update account information."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account identifier.\n:status 200: OK.\n:status 400: Unknown status.\n:status 401: Invalid auth token.\n:status 404: Account not found.")),Object(l.b)("a",{name:"accounts.AccountParameter.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(account)\n")),Object(l.b)("p",null,"create account with given account name."),Object(l.b)("p",null,".. :quickref: AccountParameter; Add account."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account identifier.\n:\\<json string type: The account type.\n:\\<json string email: The account email.\n:status 201: Successfully created.\n:status 401: Invalid auth token.\n:status 409: Account already exists.")),Object(l.b)("a",{name:"accounts.AccountParameter.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(account)\n")),Object(l.b)("p",null,"disable account with given account name."),Object(l.b)("p",null,".. :quickref: AccountParameter; Delete account information."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account identifier.\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 404: Account not found.")),Object(l.b)("a",{name:"accounts.Account"}),"## Account Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Account(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"accounts.Account.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get()\n")),Object(l.b)("p",null,"list all rucio accounts."),Object(l.b)("p",null,".. :quickref: Account; List all accounts."),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 406: Not Acceptable"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list containing all account names as dict."),Object(l.b)("a",{name:"accounts.LocalAccountLimits"}),"## LocalAccountLimits Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class LocalAccountLimits(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"accounts.LocalAccountLimits.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(account, rse=None)\n")),Object(l.b)("p",null,"get the current local limits for an account on a specific RSE"),Object(l.b)("p",null,".. :quickref: LocalAccountLimits; Get local account limits."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The rse name.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 404: RSE not found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"JSON dict containing informations about the requested user."),Object(l.b)("a",{name:"accounts.GlobalAccountLimits"}),"## GlobalAccountLimits Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class GlobalAccountLimits(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"accounts.GlobalAccountLimits.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(account, rse_expression=None)\n")),Object(l.b)("p",null,"get the current global limits for an account on a specific RSE expression"),Object(l.b)("p",null,".. :quickref: GlobalAccountLimits; Get global account limits."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse_expression"),": The rse expression.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 404: RSE not found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"JSON dict containing informations about the requested user."),Object(l.b)("a",{name:"accounts.Identities"}),"## Identities Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Identities(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"accounts.Identities.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(account)\n")),Object(l.b)("p",null,"Grant an identity access to an account."),Object(l.b)("p",null,".. :quickref: Identities; Add identity to account."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": Account identifier.\n:\\<json string identity: The identity name.\n:\\<json string authtype: The auth type of the identity.\n:\\<json string email: The email address.\n:status 201: Successfully added.\n:status 400: Parameter missing.\n:status 401: Invalid auth token.\n:status 409: Already exists.\n:status 404: Account not found.")),Object(l.b)("a",{name:"accounts.Identities.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(account)\n")),Object(l.b)("p",null,"Get all identities mapped to an account."),Object(l.b)("p",null,".. :quickref: Identities; Get account idenitity mapping."),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account identifier.\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 404: Account not found.\n:statsu 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated dicts of identities."),Object(l.b)("a",{name:"accounts.Identities.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(account)\n")),Object(l.b)("p",null,"Delete an account's identity mapping."),Object(l.b)("p",null,".. :quickref: Identities; Remove identity from account."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": Account identifier.\n:\\<json string identity: The identity name.\n:\\<json string authtype: The authentication type.\n:status 200: Successfully deleted.\n:status 401: Invalid auth token.\n:status 404: Account not found.\n:status 404: Identity not found.")),Object(l.b)("a",{name:"accounts.Rules"}),"## Rules Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Rules(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"accounts.Rules.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(account)\n")),Object(l.b)("p",null,"Return all rules of a given account."),Object(l.b)("p",null,".. :quickref: Rules; Get rules for account."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account name.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 404: Rule not found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated list of rules."),Object(l.b)("a",{name:"accounts.UsageHistory"}),"## UsageHistory Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class UsageHistory(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"accounts.UsageHistory.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(account, rse)\n")),Object(l.b)("p",null,"Return the account usage of the account."),Object(l.b)("p",null,".. :quickref: UsageHistory; Get account usage history."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 404: Account not found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated list of account usages.\nReturn the account usage of the account."),Object(l.b)("a",{name:"accounts.LocalUsage"}),"## LocalUsage Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class LocalUsage(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"accounts.LocalUsage.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(account, rse=None)\n")),Object(l.b)("p",null,"Return the local account usage of the account."),Object(l.b)("p",null,".. :quickref: LocalUsage; Get local account usage."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account name.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 404: Account not found.\n:status 404: RSE not found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated list of account usages."),Object(l.b)("a",{name:"accounts.GlobalUsage"}),"## GlobalUsage Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class GlobalUsage(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"accounts.GlobalUsage.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(account, rse_expression=None)\n")),Object(l.b)("p",null,"Return the global account usage of the account."),Object(l.b)("p",null,".. :quickref: GlobalUsage; Get global account usage."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": The account name.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 404: Account not found.\n:status 404: RSE not found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated list of account usages."),Object(l.b)("a",{name:"accounts.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"rses"}),"# rses",Object(l.b)("a",{name:"rses.RSEs"}),"## RSEs Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class RSEs(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"List all RSEs in the database."),Object(l.b)("a",{name:"rses.RSEs.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get()\n")),Object(l.b)("p",null,"List all RSEs."),Object(l.b)("p",null,".. :quickref: RSEs; List all RSEs."),Object(l.b)("p",null,":query expression: The returned list only contains RSE matching this expression.\n:resheader Content-Type: application/x-json-stream\n:status 200: DIDs found.\n:status 400: Invalid RSE Expression.\n:status 401: Invalid Auth Token.\n:status 406: Not Acceptable."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list containing all RSEs."),Object(l.b)("a",{name:"rses.RSE"}),"## RSE Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class RSE(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Create, update, get and disable RSE."),Object(l.b)("a",{name:"rses.RSE.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(rse)\n")),Object(l.b)("p",null,"Create RSE with given name."),Object(l.b)("p",null,".. :quickref: RSE; create a new RSE."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name.\n:\\<json bool deterministic: Boolean to know if the pfn is generated deterministically.\n:\\<json bool volatile: Boolean for RSE cache.\n:\\<json string city: City for the RSE.\n:\\<json bool staging_area: Staging area.\n:\\<json string region_code: The region code for the RSE.\n:\\<json string country_name: The country.\n:\\<json string continent: The continent.\n:\\<json string time_zone: Timezone.\n:\\<json string ISP: Internet Service Provider.\n:\\<json string rse_type: RSE type.\n:\\<json number latitude: Latitude coordinate of RSE.\n:\\<json number longitude: Longitude coordinate of RSE.\n:\\<json string ASN: Access service network.\n:\\<json integer availability: Availability.\n:status 201: RSE created successfully.\n:status 400: Cannot decode json parameter dictionary.\n:status 401: Invalid Auth Token.\n:status 409: RSE already exists.\n:status 409: RSE not found.")),Object(l.b)("a",{name:"rses.RSE.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(rse)\n")),Object(l.b)("p",null,"Update RSE properties (e.g. name, availability)."),Object(l.b)("p",null,".. :quickref: RSE; Update an RSE."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name.\n:\\<json dict parameters: Dictionary of parameters to update.\n:status 201: RSE updated successfully.\n:status 400: Cannot decode json parameter dictionary.\n:status 401: Invalid Auth Token.\n:status 409: RSE not found.\n:status 409: RSE already exists.")),Object(l.b)("a",{name:"rses.RSE.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(rse)\n")),Object(l.b)("p",null,"Details about a specific RSE."),Object(l.b)("p",null,".. :quickref: RSE; get RSE details."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: RSE not found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list containing all RSEs."),Object(l.b)("a",{name:"rses.RSE.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(rse)\n")),Object(l.b)("p",null,"Disable RSE with given RSE name."),Object(l.b)("p",null,".. :quickref: RSE; disable RSE."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name.\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: RSE not found.")),Object(l.b)("a",{name:"rses.Attributes"}),"## Attributes Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Attributes(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Create, update, get and disable RSE attribute."),Object(l.b)("a",{name:"rses.Attributes.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(rse, key)\n")),Object(l.b)("p",null,"create RSE attribute with given RSE name."),Object(l.b)("p",null,".. :quickref: Attributes; Create RSE attribute."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": RSE name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"key"),": Key attribute.\n:\\<json dict parameter: Dictionary with 'value'.\n:status 201: Created.\n:status 400: Cannot decode json parameter dictionary.\n:status 400: Key not defined.\n:status 401: Invalid Auth Token.\n:status 409: Attribute already exists.")),Object(l.b)("a",{name:"rses.Attributes.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(rse)\n")),Object(l.b)("p",null,"list all RSE attributes for a RSE."),Object(l.b)("p",null,".. :quickref: Attributes; List all RSE attributes."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": RSE name.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list containing all RSE attributes."),Object(l.b)("a",{name:"rses.Attributes.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(rse, key)\n")),Object(l.b)("p",null,"Delete an RSE attribute for given RSE name."),Object(l.b)("p",null,".. :quickref: Attributes; Delete RSE attribute."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": RSE name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"key"),": The key name.\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: RSE not found.\n:status 404: RSE attribute not found.")),Object(l.b)("a",{name:"rses.ProtocolList"}),"## ProtocolList Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class ProtocolList(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"List supported protocols."),Object(l.b)("a",{name:"rses.ProtocolList.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(rse)\n")),Object(l.b)("p",null,"List all supported protocols of the given RSE."),Object(l.b)("p",null,".. :quickref: Protocols; List all RSE protocols."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: RSE Operation Not Supported.\n:status 404: RSE Not Found.\n:status 404: RSE Protocol Domain Not Supported.\n:status 404: RSE Protocol Not Supported.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list containing all supported protocols and all their attributes."),Object(l.b)("a",{name:"rses.LFNS2PFNS"}),"## LFNS2PFNS Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class LFNS2PFNS(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Translate one-or-more LFNs to corresponding PFNs."),Object(l.b)("a",{name:"rses.LFNS2PFNS.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(rse, scheme=None)\n")),Object(l.b)("p",null,"Return PFNs for a set of LFNs.  Formatted as a JSON object where the key is a LFN and the\nvalue is the corresponding PFN."),Object(l.b)("p",null,".. :quickref: Attributes; Translate LFNs to PFNs."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scheme"),": The protocol identifier.\n:query lfn: One or more LFN to translate.\n:query scheme: Optional argument to help with the protocol selection (e.g., http / gsiftp / srm)\n:query domain: Optional argument used to select the protocol for wan or lan use cases.\n:query operation: Optional query argument to select the protoco for read-vs-writes.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: RSE Not Found.\n:status 404: RSE Protocol Not Supported.\n:status 404: RSE Protocol Domain Not Supported.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list with detailed PFN information."),Object(l.b)("a",{name:"rses.Protocol"}),"## Protocol Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Protocol(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Create, Update, Read and delete a specific protocol."),Object(l.b)("a",{name:"rses.Protocol.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(rse, scheme)\n")),Object(l.b)("p",null,"Create a protocol for a given RSE."),Object(l.b)("p",null,".. :quickref: Protocol; Create an RSE protocol."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scheme"),": The protocol identifier.\n:\\<json dict paramaters: parameter of the new protocol entry.\n:status 201: Created.\n:status 400: Cannot decode json parameter dictionary.\n:status 401: Invalid Auth Token.\n:status 404: RSE not found.\n:status 404: RSE Protocol Domain Not Supported.\n:status 409: RSE Protocol Priority Error.")),Object(l.b)("a",{name:"rses.Protocol.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(rse, scheme)\n")),Object(l.b)("p",null,"List all references of the provided RSE for the given protocol."),Object(l.b)("p",null,".. :quickref: Protocol; List RSE protocol."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scheme"),": The protocol identifier.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: RSE Not Found.\n:status 404: RSE Protocol Not Supported.\n:status 404: RSE Protocol Domain Not Supported.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list with detailed protocol information."),Object(l.b)("a",{name:"rses.Protocol.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(rse, scheme, hostname=None, port=None)\n")),Object(l.b)("p",null,"Updates attributes of an existing protocol entry. Because protocol identifier, hostname,\nand port are used as unique identifier they are immutable."),Object(l.b)("p",null,".. :quickref: Protocol; Update RSE protocol."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scheme"),": The protocol identifier."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"hostname"),": The hostname defined for the scheme, used if more than one scheme is registered with the same identifier."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"port"),": The port registered for the hostname, ued if more than one scheme is registered with the same identifier and hostname.\n:\\<json dict paramaters: parameter of the new protocol entry.\n:status 201: Created.\n:status 400: Cannot decode json parameter dictionary.\n:status 401: Invalid Auth Token.\n:status 404: RSE not found.\n:status 404: RSE Protocol Not Supported.\n:status 404: RSE Protocol Domain Not Supported.\n:status 409: RSE Protocol Priority Error.")),Object(l.b)("a",{name:"rses.Protocol.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(rse, scheme, hostname=None, port=None)\n")),Object(l.b)("p",null,"Deletes a protocol entry for the provided RSE."),Object(l.b)("p",null,".. :quickref: Protocol; Delete an RSE protocol."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scheme"),": The protocol identifier."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"hostname"),": The hostname defined for the scheme, used if more than one scheme is registered with the same identifier."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"port"),": The port registered for the hostname, ued if more than one scheme is registered with the same identifier and hostname.\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: RSE not found.\n:status 404: RSE Protocol Not Supported.")),Object(l.b)("a",{name:"rses.Usage"}),"## Usage Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Usage(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Update and read RSE space usage information."),Object(l.b)("a",{name:"rses.Usage.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(rse)\n")),Object(l.b)("p",null,"Get RSE usage information."),Object(l.b)("p",null,".. :quickref: Usage; Get RSE usage."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name.\n:query source: The information source, e.g., srm.\n:query per_account: Boolean whether the usage should be also calculated per account or not.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: RSE Not Found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list of dictionaries with the usage information."),Object(l.b)("a",{name:"rses.Usage.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(rse)\n")),Object(l.b)("p",null,"Update RSE usage information."),Object(l.b)("p",null,".. :quickref: Usage; Update RSE usage."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name.\n:\\<json dict parameter: Dictionary with 'source', 'used', 'free', 'files' values to update.\n:status 200: OK.\n:status 400: Cannot decode json parameter dictionary.\n:status 401: Invalid Auth Token.\n:status 404: RSE not found.")),Object(l.b)("a",{name:"rses.UsageHistory"}),"## UsageHistory Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class UsageHistory(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Read RSE space usage history information."),Object(l.b)("a",{name:"rses.UsageHistory.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(rse)\n")),Object(l.b)("p",null,"Get RSE usage information."),Object(l.b)("p",null,".. :quickref: UsageHistory; Get RSE usage history."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: RSE Not Found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated list of dictionary with RSE usage information."),Object(l.b)("a",{name:"rses.Limits"}),"## Limits Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Limits(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Create, Update, Read and delete RSE limits."),Object(l.b)("a",{name:"rses.Limits.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(rse)\n")),Object(l.b)("p",null,"Get RSE limits."),Object(l.b)("p",null,".. :quickref: Limits; Get RSE limits."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: RSE Not Found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of dictionaries with RSE limits."),Object(l.b)("a",{name:"rses.Limits.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(rse)\n")),Object(l.b)("p",null,"Update RSE limits."),Object(l.b)("p",null,".. :quickref: Limits; Update RSE limits."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name.\n:status 200: OK.\n:status 400: Cannot decode json parameter dictionary.\n:status 401: Invalid Auth Token.\n:status 404: RSE Not Found.")),Object(l.b)("a",{name:"rses.Limits.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(rse)\n")),Object(l.b)("p",null,"Update RSE limits."),Object(l.b)("p",null,".. :quickref: Limits; Update RSE limits."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name.\n:status 200: OK.\n:status 400: Cannot decode json parameter dictionary.\n:status 401: Invalid Auth Token.\n:status 404: RSE Not Found.")),Object(l.b)("a",{name:"rses.RSEAccountUsageLimit"}),"## RSEAccountUsageLimit Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class RSEAccountUsageLimit(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Read and delete RSE limits for accounts."),Object(l.b)("a",{name:"rses.RSEAccountUsageLimit.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(rse)\n")),Object(l.b)("p",null,"Get account usage and limit for one RSE."),Object(l.b)("p",null,".. :quickref: RSEAccountUsageLimit; Get account usage."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: RSE Not Found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated list of dict with account usage and limits."),Object(l.b)("a",{name:"rses.Distance"}),"## Distance Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Distance(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Create/Update and read distances between RSEs."),Object(l.b)("a",{name:"rses.Distance.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(source, destination)\n")),Object(l.b)("p",null,"Get RSE distance between source and destination."),Object(l.b)("p",null,".. :quickref: Distance; Get RSE distance."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"source"),": the source RSE name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"destination"),": the destination RSE name.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of dictionaries with RSE distances."),Object(l.b)("a",{name:"rses.Distance.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(source, destination)\n")),Object(l.b)("p",null,"Create distance information between source RSE and destination RSE."),Object(l.b)("p",null,".. :quickref: Distance; Create RSE distance."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"source"),": The source RSE name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"destination"),": The destination RSE name.\n:status 201: Created.\n:status 400: Cannot decode json parameter dictionary.\n:status 401: Invalid Auth Token.\n:status 404: RSE Not Found.")),Object(l.b)("a",{name:"rses.Distance.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put(source, destination)\n")),Object(l.b)("p",null,"Update distance information between source RSE and destination RSE."),Object(l.b)("p",null,".. :quickref: Distance; Update RSE distance."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"source"),": The source RSE name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"destination"),": The destination RSE name.\n:status 200: OK.\n:status 400: Cannot decode json parameter dictionary.\n:status 401: Invalid Auth Token.\n:status 404: RSE Not Found.")),Object(l.b)("a",{name:"rses.Distance.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(source, destination)\n")),Object(l.b)("p",null,"Delete distance information between source RSE and destination RSE."),Object(l.b)("p",null,".. :quickref: Distance; Delete RSE distances."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"source"),": The source RSE name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"destination"),": The destination RSE name.\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: RSE Not Found.")),Object(l.b)("a",{name:"rses.QoSPolicy"}),"## QoSPolicy Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class QoSPolicy(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Add/Delete/List QoS policies on an RSE."),Object(l.b)("a",{name:"rses.QoSPolicy.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | post(rse, policy)\n")),Object(l.b)("p",null,"Add QoS policy to RSE"),Object(l.b)("p",null,".. :quickref: QoSPolicy; Add QoS policy to RSE."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"policy"),": The QoS policy name.\n:status 201: Created.\n:status 401: Invalid Auth Token.\n:status 404: RSE Not Found.")),Object(l.b)("a",{name:"rses.QoSPolicy.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | delete(rse, policy)\n")),Object(l.b)("p",null,"Delete QoS policy from RSE."),Object(l.b)("p",null,".. :quickref: QoSPolicy; Delete QoS policy from RSE."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"policy"),": The QoS policy name.\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: RSE not found.")),Object(l.b)("a",{name:"rses.QoSPolicy.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get(rse)\n")),Object(l.b)("p",null,"List all QoS policies of an RSE."),Object(l.b)("p",null,".. :quickref: QoSPolicy; List all QoS policies of an RSE."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name.\n:resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of QoS policies"),Object(l.b)("a",{name:"rses.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"auth"}),"# auth",Object(l.b)("a",{name:"auth.UserPass"}),"## UserPass Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class UserPass(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Authenticate a Rucio account temporarily via username and password."),Object(l.b)("a",{name:"auth.UserPass.options"}),"#### options",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | options()\n")),Object(l.b)("p",null,"Allow cross-site scripting. Explicit for Authentication."),Object(l.b)("p",null,":resheader Access-Control-Allow-Origin:\n:resheader Access-Control-Allow-Headers:\n:resheader Access-Control-Allow-Methods:\n:resheader Access-Control-Allow-Credentials:\n:resheader Access-Control-Expose-Headers:\n:status 200: OK"),Object(l.b)("a",{name:"auth.UserPass.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/octet-stream'])\n | get()\n")),Object(l.b)("p",null,"Authenticate a Rucio account temporarily via username and password."),Object(l.b)("p",null,".. :quickref: UserPass; Authenticate with username/password"),Object(l.b)("p",null,":reqheader X-Rucio-VO: VO name as a string (Multi-VO Only)\n:reqheader X-Rucio-Account: Account identifier as a string.\n:reqheader X-Rucio-Username: Username as a string.\n:reqheader X-Rucio-Password: password as a text-plain string.\n:reqheader X-Rucio-AppID: Application identifier as a string.\n:resheader Access-Control-Allow-Origin:\n:resheader Access-Control-Allow-Headers:\n:resheader Access-Control-Allow-Methods:\n:resheader Access-Control-Allow-Credentials:\n:resheader Access-Control-Expose-Headers:\n:resheader X-Rucio-Auth-Token: The authentication token\n:status 200: Successfully authenticated\n:status 404: Invalid credentials"),Object(l.b)("a",{name:"auth.OIDC"}),"## OIDC Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class OIDC(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Requests a user specific Authorization URL (assigning a user session state,\nnonce, Rucio OIDC Client ID with the correct issuers authentication endpoint)."),Object(l.b)("a",{name:"auth.OIDC.options"}),"#### options",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | options()\n")),Object(l.b)("p",null,"Allow cross-site scripting. Explicit for Authentication."),Object(l.b)("p",null,":status 200: OK"),Object(l.b)("a",{name:"auth.OIDC.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/octet-stream'])\n | get()\n")),Object(l.b)("p",null,".. :quickref: OIDC; Authenticate with OIDC"),Object(l.b)("p",null,":status 200: OK\n:status 401: Unauthorized\n:resheader X-Rucio-OIDC-Auth-URL: User & Rucio OIDC Client specific Authorization URL"),Object(l.b)("a",{name:"auth.RedirectOIDC"}),"## RedirectOIDC Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class RedirectOIDC(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Authenticate a Rucio account via\nan Identity Provider (XDC IAM as of June 2019)."),Object(l.b)("a",{name:"auth.RedirectOIDC.options"}),"#### options",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | options()\n")),Object(l.b)("p",null,"Allow cross-site scripting. Explicit for Authentication."),Object(l.b)("p",null,":status 200: OK"),Object(l.b)("a",{name:"auth.RedirectOIDC.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/octet-stream', 'text/html'])\n | get()\n")),Object(l.b)("p",null,".. :quickref: OIDC;"),Object(l.b)("p",null,":status 200: OK\n:status 303: Redirect\n:status 401: Unauthorized\n:resheader X-Rucio-Auth-Token: The authentication token"),Object(l.b)("a",{name:"auth.CodeOIDC"}),"## CodeOIDC Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class CodeOIDC(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"IdP redirects to this endpoint with the AuthZ code\nRucio Auth server will request new token. This endpoint should be reached\nonly if the request/ IdP login has been made through web browser. Then the response\ncontent will be in html (including the potential errors displayed).\nThe token will be saved in the Rucio DB, but only Rucio code will\nbe returned on the web page, or, in case of polling is True, successful\noperation is confirmed waiting for the Rucio client to get the token automatically."),Object(l.b)("a",{name:"auth.CodeOIDC.options"}),"#### options",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | options()\n")),Object(l.b)("p",null,"HTTP Success:\n200 OK"),Object(l.b)("p",null,"Allow cross-site scripting. Explicit for Authentication."),Object(l.b)("a",{name:"auth.CodeOIDC.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/octet-stream', 'text/html'])\n | get()\n")),Object(l.b)("p",null,".. :quickref: OIDC;"),Object(l.b)("p",null,":status 200: OK\n:status 401: Unauthorized"),Object(l.b)("a",{name:"auth.TokenOIDC"}),"## TokenOIDC Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class TokenOIDC(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Authenticate a Rucio account temporarily via ID,\naccess (eventually save new refresh token)\nreceived from an Identity Provider."),Object(l.b)("a",{name:"auth.TokenOIDC.options"}),"#### options",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | options()\n")),Object(l.b)("p",null,"Allow cross-site scripting. Explicit for Authentication."),Object(l.b)("p",null,":status 200: OK"),Object(l.b)("a",{name:"auth.TokenOIDC.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/octet-stream'])\n | get()\n")),Object(l.b)("p",null,".. :quickref: OIDC;"),Object(l.b)("p",null,":status 200: OK\n:status 401: Unauthorized\n:resheader X-Rucio-Auth-Token: The authentication token\n:resheader X-Rucio-Auth-Token-Expires: The time when the token expires"),Object(l.b)("a",{name:"auth.RefreshOIDC"}),"## RefreshOIDC Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class RefreshOIDC(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"For a presented and access token which has equivalent in Rucio DB\n(and also has refrech token in the Rucio DB) the class will attempt\ntoken refresh and return a user a new refreshed token. If the presented token\nis a result of a previous refresh happening in the last 10 min, the same token will be returned."),Object(l.b)("a",{name:"auth.RefreshOIDC.options"}),"#### options",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | options()\n")),Object(l.b)("p",null,"Allow cross-site scripting. Explicit for Authentication."),Object(l.b)("p",null,":status 200: OK"),Object(l.b)("a",{name:"auth.RefreshOIDC.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/octet-stream'])\n | get()\n")),Object(l.b)("p",null,".. :quickref: OIDC;"),Object(l.b)("p",null,":status 200: OK\n:status 401: Unauthorized\n:resheader X-Rucio-Auth-Token: The authentication token"),Object(l.b)("a",{name:"auth.GSS"}),"## GSS Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class GSS(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Authenticate a Rucio account temporarily via a GSS token."),Object(l.b)("a",{name:"auth.GSS.options"}),"#### options",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | options()\n")),Object(l.b)("p",null,"HTTP Success:\n200 OK"),Object(l.b)("p",null,"Allow cross-site scripting. Explicit for Authentication."),Object(l.b)("a",{name:"auth.GSS.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/octet-stream'])\n | get()\n")),Object(l.b)("p",null,"Authenticate a Rucio account temporarily via a GSS token."),Object(l.b)("p",null,".. :quickref: GSS; Authenticate with GSS token"),Object(l.b)("p",null,":reqheader Rucio-VO: VO name as a string (Multi-VO only).\n:reqheader Rucio-Account: Account identifier as a string.\n:reqheader Rucio-AppID: Application identifier as a string.\n:reqheader SavedCredentials: Apache mod_auth_kerb SavedCredentials.\n:resheader Access-Control-Allow-Origin:\n:resheader Access-Control-Allow-Headers:\n:resheader Access-Control-Allow-Methods:\n:resheader Access-Control-Allow-Credentials:\n:resheader Access-Control-Expose-Headers:\n:resheader X-Rucio-Auth-Token: The authentication token\n:status 200: Successfully authenticated\n:status 404: Invalid credentials"),Object(l.b)("a",{name:"auth.x509"}),"## x509 Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class x509(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Authenticate a Rucio account temporarily via an x509 certificate."),Object(l.b)("a",{name:"auth.x509.options"}),"#### options",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | options()\n")),Object(l.b)("p",null,"HTTP Success:\n200 OK"),Object(l.b)("p",null,"Allow cross-site scripting. Explicit for Authentication."),Object(l.b)("a",{name:"auth.x509.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/octet-stream'])\n | get()\n")),Object(l.b)("p",null,"Authenticate a Rucio account temporarily via an x509 certificate."),Object(l.b)("p",null,".. :quickref: x509; Authenticate with x509 certificate."),Object(l.b)("p",null,":reqheader Rucio-VO: VO name as a string (Multi-VO only).\n:reqheader Rucio-Account: Account identifier as a string.\n:reqheader Rucio-AppID: Application identifier as a string.\n:reqheader SSLStdEnv: Apache mod_ssl SSL Standard Env Variables.\n:resheader Access-Control-Allow-Origin:\n:resheader Access-Control-Allow-Headers:\n:resheader Access-Control-Allow-Methods:\n:resheader Access-Control-Allow-Credentials:\n:resheader Access-Control-Expose-Headers:\n:resheader X-Rucio-Auth-Token: The authentication token\n:status 200: Successfully authenticated\n:status 404: Invalid credentials"),Object(l.b)("a",{name:"auth.SSH"}),"## SSH Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class SSH(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Authenticate a Rucio account temporarily via SSH key exchange."),Object(l.b)("a",{name:"auth.SSH.options"}),"#### options",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | options()\n")),Object(l.b)("p",null,"HTTP Success:\n200 OK"),Object(l.b)("p",null,"Allow cross-site scripting. Explicit for Authentication."),Object(l.b)("a",{name:"auth.SSH.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/octet-stream'])\n | get()\n")),Object(l.b)("p",null,"Authenticate a Rucio account temporarily via SSH key exchange."),Object(l.b)("p",null,".. :quickref: SSH; Authenticate with SSH key exchange."),Object(l.b)("p",null,":reqheader Rucio-VO: VO name as a string (Multi-VO only).\n:reqheader Rucio-Account: Account identifier as a string.\n:reqheader Rucio-SSH-Signature: Response to server challenge signed with SSH private key as a base64 encoded string.\n:reqheader Rucio-AppID: Application identifier as a string.\n:resheader Access-Control-Allow-Origin:\n:resheader Access-Control-Allow-Headers:\n:resheader Access-Control-Allow-Methods:\n:resheader Access-Control-Allow-Credentials:\n:resheader Access-Control-Expose-Headers:\n:resheader X-Rucio-Auth-Token: The authentication token\n:status 200: Successfully authenticated\n:status 404: Invalid credentials"),Object(l.b)("a",{name:"auth.SSHChallengeToken"}),"## SSHChallengeToken Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class SSHChallengeToken(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Request a challenge token for SSH authentication"),Object(l.b)("a",{name:"auth.SSHChallengeToken.options"}),"#### options",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | options()\n")),Object(l.b)("p",null,"HTTP Success:\n200 OK"),Object(l.b)("p",null,"Allow cross-site scripting. Explicit for Authentication."),Object(l.b)("a",{name:"auth.SSHChallengeToken.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/octet-stream'])\n | get()\n")),Object(l.b)("p",null,"Request a challenge token for SSH authentication"),Object(l.b)("p",null,".. :quickref: SSH; Request SSH Challenge Token"),Object(l.b)("p",null,":reqheader Rucio-VO: VO name as a string (Multi-VO only).\n:reqheader Rucio-Account: Account identifier as a string.\n:reqheader Rucio-AppID: Application identifier as a string.\n:resheader Access-Control-Allow-Origin:\n:resheader Access-Control-Allow-Headers:\n:resheader Access-Control-Allow-Methods:\n:resheader Access-Control-Allow-Credentials:\n:resheader Access-Control-Expose-Headers:\n:resheader X-Rucio-SSH-Challenge-Token: The SSH challenge token\n:resheader X-Rucio-SSH-Challenge-Token-Expires: The expiry time of the token\n:status 200: Successfully authenticated\n:status 404: Invalid credentials"),Object(l.b)("a",{name:"auth.SAML"}),"## SAML Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class SAML(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Authenticate a Rucio account temporarily via CERN SSO."),Object(l.b)("a",{name:"auth.SAML.options"}),"#### options",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | options()\n")),Object(l.b)("p",null,"Allow cross-site scripting. Explicit for Authentication."),Object(l.b)("p",null,":status 200: OK"),Object(l.b)("a",{name:"auth.SAML.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/octet-stream'])\n | get()\n")),Object(l.b)("p",null,".. :quickref: SAML;"),Object(l.b)("p",null,":status 200: OK\n:status 401: Unauthorized\n:reqheader Rucio-VO: VO name as a string (Multi-VO only)\n:reqheader Rucio-Account: Account identifier as a string.\n:reqheader Rucio-Username: Username as a string.\n:reqheader Rucio-Password: Password as a string.\n:reqheader Rucio-AppID: Application identifier as a string.\n:resheader X-Rucio-SAML-Auth-URL: as a variable-length string header."),Object(l.b)("a",{name:"auth.SAML.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,".. :quickref: SAML;"),Object(l.b)("p",null,":status 200: OK"),Object(l.b)("a",{name:"auth.Validate"}),"## Validate Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Validate(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"Validate a Rucio Auth Token."),Object(l.b)("a",{name:"auth.Validate.options"}),"#### options",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | options()\n")),Object(l.b)("p",null,"HTTP Success:\n200 OK"),Object(l.b)("p",null,"Allow cross-site scripting. Explicit for Authentication."),Object(l.b)("a",{name:"auth.Validate.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/octet-stream'])\n | get()\n")),Object(l.b)("p",null,"Validate a Rucio Auth Token."),Object(l.b)("p",null,".. :quickref: Validate; Validate a Rucio Auth Token."),Object(l.b)("p",null,":reqheader Rucio-Auth-Token: as a variable-length string.\n:status 406: Not Acceptable."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Tuple(account name, token lifetime)."),Object(l.b)("a",{name:"auth.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"heartbeats"}),"# heartbeats",Object(l.b)("a",{name:"heartbeats.Heartbeat"}),"## Heartbeat Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Heartbeat(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST API for Heartbeats."),Object(l.b)("a",{name:"heartbeats.Heartbeat.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get()\n")),Object(l.b)("p",null,"List all heartbeats."),Object(l.b)("p",null,".. :quickref: Heartbeat; List heartbeats."),Object(l.b)("p",null,":resheader Content-Type: application/json\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 406: Not Acceptable."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of heartbeats."),Object(l.b)("a",{name:"heartbeats.Heartbeat.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Accepts a heartbeat."),Object(l.b)("p",null,".. :quickref: Heartbeat; Accepts a heartbeat."),Object(l.b)("p",null,":\\<json dict parameter: Dictionary with 'executable', 'hostname', 'pid', 'thread', 'older_than', 'payload'\n:status 200: OK.\n:status 400: Cannot decode json parameter list.\n:status 401: Invalid Auth Token.\n:status 404: Key not Found."),Object(l.b)("a",{name:"heartbeats.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"accountlimits"}),"# accountlimits",Object(l.b)("a",{name:"accountlimits.LocalAccountLimit"}),"## LocalAccountLimit Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class LocalAccountLimit(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"accountlimits.LocalAccountLimit.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(account, rse)\n")),Object(l.b)("p",null,"Create or update an account limit."),Object(l.b)("p",null,".. :quickref: LocalAccountLimit; Create/update local account limits."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": Account name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": RSE name.\n:status 201: Successfully created or updated.\n:status 401: Invalid auth token.\n:status 404: RSE not found.\n:status 404: Account not found")),Object(l.b)("a",{name:"accountlimits.LocalAccountLimit.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(account, rse)\n")),Object(l.b)("p",null,"Delete an account limit."),Object(l.b)("p",null,".. :quickref: LocalAccountLimit; Delete local account limits."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": Account name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": RSE name.\n:status 200: Successfully deleted.\n:status 401: Invalid auth token.\n:status 404: RSE not found.\n:status 404: Account not found")),Object(l.b)("a",{name:"accountlimits.GlobalAccountLimit"}),"## GlobalAccountLimit Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class GlobalAccountLimit(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"accountlimits.GlobalAccountLimit.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post(account, rse_expression)\n")),Object(l.b)("p",null,"Create or update an account limit."),Object(l.b)("p",null,".. :quickref: GlobalAccountLimit; Create/update global account limits."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": Account name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse_expression"),": RSE name.\n:status 201: Successfully created or updated.\n:status 401: Invalid auth token.\n:status 404: RSE not found.\n:status 404: Account not found")),Object(l.b)("a",{name:"accountlimits.GlobalAccountLimit.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete(account, rse_expression)\n")),Object(l.b)("p",null,"Delete an account limit."),Object(l.b)("p",null,".. :quickref: GlobalAccountLimit; Delete global account limits."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"account"),": Account name."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse_expression"),": RSE name.\n:status 200: Successfully deleted.\n:status 401: Invalid auth token.\n:status 404: RSE not found.\n:status 404: Account not found")),Object(l.b)("a",{name:"accountlimits.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"archives"}),"# archives",Object(l.b)("a",{name:"archives.Archive"}),"## Archive Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Archive(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for archive."),Object(l.b)("a",{name:"archives.Archive.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(scope_name)\n")),Object(l.b)("p",null,"List archive content keys."),Object(l.b)("p",null,".. :quickref: Archive; list archive content keys."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 400: Invalid value.\n:status 406: Not Acceptable.")),Object(l.b)("a",{name:"archives.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"redirect"}),"# redirect",Object(l.b)("a",{name:"redirect.MetaLinkRedirector"}),"## MetaLinkRedirector Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class MetaLinkRedirector(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"redirect.MetaLinkRedirector.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/metalink4+xml'])\n | get(scope_name)\n")),Object(l.b)("p",null,"Metalink redirect"),Object(l.b)("p",null,".. :quickref: MetaLinkRedirector; Metalink redirect."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:resheader Content-Type: application/metalink4+xml'.\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 404: RSE Not Found.\n:status 404: DID Not Found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Metalink file"),Object(l.b)("a",{name:"redirect.HeaderRedirector"}),"## HeaderRedirector Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class HeaderRedirector(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"redirect.HeaderRedirector.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | get(scope_name)\n")),Object(l.b)("p",null,"Header Redirect"),Object(l.b)("p",null,".. :quickref: HeaderRedirector; Header redirect."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:resheader Content-Type: application/metalink+xml'.\n:status 303: Redirect.\n:status 401: Invalid Auth Token.\n:status 404: RSE Not Found.\n:status 404: DID Not Found.")),Object(l.b)("a",{name:"redirect.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"__init__"}),"# \\_\\_init\\_\\_",Object(l.b)("a",{name:"locks"}),"# locks",Object(l.b)("a",{name:"locks.LockByRSE"}),"## LockByRSE Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class LockByRSE(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for dataset locks."),Object(l.b)("a",{name:"locks.LockByRSE.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(rse)\n")),Object(l.b)("p",null,"get locks for a given rse."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name.\n:query did_type: The type used to filter, e.g., DATASET, CONTAINER.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated list of dictionaries with lock information."),Object(l.b)("a",{name:"locks.LocksByScopeName"}),"## LocksByScopeName Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class LocksByScopeName(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for dataset locks."),Object(l.b)("a",{name:"locks.LocksByScopeName.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(scope_name)\n")),Object(l.b)("p",null,"get locks for a given scope, name."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:query did_type: The type used to filter, e.g., DATASET, CONTAINER.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid Auth Token.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated list of dictionary with lock information."),Object(l.b)("a",{name:"locks.DatasetLocksForDids"}),"## DatasetLocksForDids Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class DatasetLocksForDids(ErrorHandlingMethodView)\n")),Object(l.b)("p",null,"REST APIs for multiple dataset locks."),Object(l.b)("a",{name:"locks.DatasetLocksForDids.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | post()\n")),Object(l.b)("p",null,"get locks for a given scope, name."),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 400: Wrong DID type."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"Line separated list of dictionary with lock information."),Object(l.b)("a",{name:"locks.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"),Object(l.b)("a",{name:"replicas"}),"# replicas",Object(l.b)("a",{name:"replicas.Replicas"}),"## Replicas Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Replicas(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"replicas.Replicas.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream', 'application/metalink4+xml'])\n | get(scope_name)\n")),Object(l.b)("p",null,"List all replicas for data identifiers."),Object(l.b)("p",null,".. :quickref: Replicas; List replicas for DID.\nHTTP Success:\n200 OK"),Object(l.b)("p",null,"HTTP Error:\n401 Unauthorized\n500 InternalError"),Object(l.b)("p",null,":reqheader HTTP_ACCEPT: application/metalink4+xml"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:resheader Content-Type: application/x-json-stream\n:resheader Content-Type: application/metalink4+xml\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 404: DID not found.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A dictionary containing all replicas information.\nA metalink description of replicas if metalink(4)+xml is specified in Accept:"),Object(l.b)("a",{name:"replicas.Replicas.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Create file replicas at a given RSE."),Object(l.b)("p",null,".. :quickref: Replicas; create replicas at RSE"),Object(l.b)("p",null,":\\<json string rse: The RSE name.\n:\\<json list files: list of dicts with 'scope', 'name', 'bytes', 'meta' and 'adler32'.\n:\\<json bool ignore_availability: Flag to ignore the RSE blocklisting.\n:status 201: Replica Successfully created.\n:status 400: Invalid Path.\n:status 401: Invalid auth token.\n:status 404: RSE not found.\n:status 404: Scope not found.\n:status 409: Replica already exists.\n:status 409: DID already exists.\n:status 503: Resource Temporary Unavailable."),Object(l.b)("a",{name:"replicas.Replicas.put"}),"#### put",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | put()\n")),Object(l.b)("p",null,"Update a file replicas state at a given RSE."),Object(l.b)("p",null,".. :quickref: Replicas; update replicas state."),Object(l.b)("p",null,":\\<json string rse: The RSE name.\n:\\<json list files: list of dicts with 'scope', 'name' and 'state'.\n:status 201: Replica successfully updated.\n:status 400: Cannot decode json parameter list.\n:status 401: Invalid auth token."),Object(l.b)("a",{name:"replicas.Replicas.delete"}),"#### delete",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | delete()\n")),Object(l.b)("p",null,"Delete file replicas at a given RSE."),Object(l.b)("p",null,".. :quickref: Replicas; Delete replica at RSE."),Object(l.b)("p",null,":\\<json string rse: The RSE name.\n:\\<json list files: list of dicts with 'scope', 'name'.\n:\\<json bool ignore_availability: Flag to ignore the RSE blocklisting.\n:status 200: Replica successfully deleted.\n:status 400: Cannot decode json parameter list.\n:status 401: Invalid auth token.\n:status 404: RSE not found.\n:status 404: Replica not found."),Object(l.b)("a",{name:"replicas.ListReplicas"}),"## ListReplicas Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class ListReplicas(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"replicas.ListReplicas.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream', 'application/metalink4+xml'])\n | post()\n")),Object(l.b)("p",null,"List all replicas for data identifiers."),Object(l.b)("p",null,".. :quickref: Replicas; List replicas for multiple DIDs."),Object(l.b)("p",null,":reqheader HTTP_ACCEPT: application/metalink4+xml\n:query schemes: A list of schemes to filter the replicas.\n:query sort: Requested sorting of the result, e.g., 'geoip', 'closeness', 'dynamic', 'ranking', 'random'.\n:\\<json list dids: list of DIDs.\n:\\<json list schemes: A list of schemes to filter the replicas.\n:\\<json bool unavailable: (deprecated) Also include unavailable replicas.\n:\\<json bool all_states: Return all replicas whatever state they are in. Adds an extra 'states' entry in the result dictionary.\n:\\<json string rse_expression: The RSE expression to restrict on a list of RSEs.\n:\\<json dict client_location: Client location dictionary for PFN modification {'ip', 'fqdn', 'site', 'latitude', 'longitude'}.\n:\\<json bool sort: Requested sorting of the result, e.g., 'geoip', 'closeness', 'dynamic', 'ranking', 'random'.\n:\\<json string domain: The network domain for the call, either None, 'wan' or 'lan'. None is fallback to 'wan', 'all' is both ","['lan','wan']","\n:resheader Content-Type: application/x-json-stream\n:resheader Content-Type: application/metalink4+xml\n:status 200: OK.\n:status 400: Cannot decode json parameter list.\n:status 401: Invalid auth token.\n:status 404: DID not found.\n:status 406: Not Acceptable."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A dictionary containing all replicas information.\nA metalink description of replicas if metalink(4)+xml is specified in Accept:"),Object(l.b)("a",{name:"replicas.ReplicasDIDs"}),"## ReplicasDIDs Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class ReplicasDIDs(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"replicas.ReplicasDIDs.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | post()\n")),Object(l.b)("p",null,"List the DIDs associated to a list of replicas."),Object(l.b)("p",null,".. :quickref: ReplicasDIDs; List DIDs for replicas."),Object(l.b)("p",null,":\\<json string pfns: The list of PFNs.\n:\\<json string rse: The RSE name.\n:resheader Content-Type: application/x-json-string\n:status 200: OK.\n:status 400: Cannot decode json parameter list.\n:status 406: Not Acceptable."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list of dictionaries containing the mapping PFNs to DIDs."),Object(l.b)("a",{name:"replicas.BadReplicas"}),"## BadReplicas Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class BadReplicas(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"replicas.BadReplicas.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | post()\n")),Object(l.b)("p",null,"Declare a list of bad replicas."),Object(l.b)("p",null,".. :quickref: BadReplicasStates; Declare bad replicas."),Object(l.b)("p",null,":\\<json string pfns: The list of PFNs.\n:\\<json string reason: The reason of the loss.\n:resheader Content-Type: application/json\n:status 201: Created.\n:status 400: Cannot decode json parameter list.\n:status 401: Invalid auth token.\n:status 404: RSE not found.\n:status 404: Replica not found."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list of not successfully declared files."),Object(l.b)("a",{name:"replicas.SuspiciousReplicas"}),"## SuspiciousReplicas Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class SuspiciousReplicas(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"replicas.SuspiciousReplicas.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | post()\n")),Object(l.b)("p",null,"Declare a list of suspicious replicas."),Object(l.b)("p",null,".. :quickref: SuspiciousReplicas; Declare suspicious replicas."),Object(l.b)("p",null,":\\<json string pfns: The list of PFNs.\n:\\<json string reason: The reason of the loss.\n:resheader Content-Type: application/json\n:status 201: Created.\n:status 400: Cannot decode json parameter list.\n:status 401: Invalid auth token.\n:status 404: Replica not found."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list of not successfully declared files."),Object(l.b)("a",{name:"replicas.SuspiciousReplicas.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/json'])\n | get()\n")),Object(l.b)("p",null,"List the suspicious replicas on a list of RSEs."),Object(l.b)("p",null,".. :quickref: SuspiciousReplicas; Get suspicious replicas."),Object(l.b)("p",null,":resheader Content-Type: application/json\n:status 200: OK.\n:status 406: Not Acceptable."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of suspicious file replicas."),Object(l.b)("a",{name:"replicas.BadReplicasStates"}),"## BadReplicasStates Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class BadReplicasStates(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"replicas.BadReplicasStates.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get()\n")),Object(l.b)("p",null,"List the bad or suspicious replicas by states."),Object(l.b)("p",null,".. :quickref: BadReplicasStates; List bad replicas."),Object(l.b)("p",null,':query state: The state of the file (SUSPICIOUS or BAD).\n:query rse: The RSE name.\n:query younger_than: date in format "%Y-%m-%dT%H:%M:%S.%f" to select bad replicas younger than this date.\n:query older_than: date in format "%Y-%m-%dT%H:%M:%S.%f" to select bad replicas older than this date.\n:query limit: The maximum number of replicas returned.\n:query list_pfns: Flag to include pfns.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 406: Not Acceptable.'),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of dicts of bad file replicas."),Object(l.b)("a",{name:"replicas.BadReplicasSummary"}),"## BadReplicasSummary Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class BadReplicasSummary(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"replicas.BadReplicasSummary.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get()\n")),Object(l.b)("p",null,"Return a summary of the bad replicas by incident."),Object(l.b)("p",null,".. :quickref: BadReplicasSummary; List bad replicas by incident."),Object(l.b)("p",null,":query rse_expression: The RSE expression.\n:query from_date: The start date.\n:query to_date: The end date.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 406: Not Acceptable."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"List of bad replicas by incident."),Object(l.b)("a",{name:"replicas.DatasetReplicas"}),"## DatasetReplicas Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class DatasetReplicas(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"replicas.DatasetReplicas.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(scope_name)\n")),Object(l.b)("p",null,"List dataset replicas."),Object(l.b)("p",null,".. :quickref: DatasetReplicas; List dataset replicas."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:query deep: Flag to ennable lookup at the file level.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A dictionary containing all replicas information."),Object(l.b)("a",{name:"replicas.DatasetReplicasBulk"}),"## DatasetReplicasBulk Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class DatasetReplicasBulk(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"replicas.DatasetReplicasBulk.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | post()\n")),Object(l.b)("p",null,"List dataset replicas for multiple DIDs."),Object(l.b)("p",null,".. :quickref: DatasetReplicas; List replicas for multiple DIDs."),Object(l.b)("p",null,":\\<json list dids: List of DIDs for querying the datasets.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 400: Bad Request.\n:status 401: Invalid auth token.\n:status 406: Not Acceptable."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A dictionary containing all replicas information."),Object(l.b)("a",{name:"replicas.DatasetReplicasVP"}),"## DatasetReplicasVP Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class DatasetReplicasVP(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"replicas.DatasetReplicasVP.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(scope_name)\n")),Object(l.b)("p",null,"List dataset replicas using the Virtual Placement service."),Object(l.b)("p",null,"NOTICE: This is an RnD function and might change or go away at any time."),Object(l.b)("p",null,".. :quickref: DatasetReplicas; List dataset replicas with VP."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"scope_name"),": data identifier (scope)/(name).\n:query deep: Flag to ennable lookup at the file level.\n:resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 406: Not Acceptable.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"If VP exists a list of dicts of sites, otherwise nothing"),Object(l.b)("a",{name:"replicas.ReplicasRSE"}),"## ReplicasRSE Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class ReplicasRSE(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"replicas.ReplicasRSE.get"}),"#### get",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | @check_accept_header_wrapper_flask(['application/x-json-stream'])\n | get(rse)\n")),Object(l.b)("p",null,"List dataset replicas per RSE."),Object(l.b)("p",null,".. :quickref: ReplicasRSE; List dataset replicas per RSE."),Object(l.b)("p",null,":resheader Content-Type: application/x-json-stream\n:status 200: OK.\n:status 401: Invalid auth token.\n:status 406: Not Acceptable."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A dictionary containing all replicas on the RSE."),Object(l.b)("a",{name:"replicas.BadDIDs"}),"## BadDIDs Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class BadDIDs(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"replicas.BadDIDs.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Declare a list of bad replicas by DID."),Object(l.b)("p",null,".. :quickref: BadDIDs; Declare bad replicas by DID."),Object(l.b)("p",null,":\\<json string pfns: The list of PFNs.\n:\\<json string reason: The reason of the loss.\n:\\<json string state: The state is eiher BAD, SUSPICIOUS or TEMPORARY_UNAVAILABLE.\n:\\<json string expires_at: The expiration date. Only apply to TEMPORARY_UNAVAILABLE.\n:resheader Content-Type: application/x-json-string\n:status 201: Created.\n:status 400: Cannot decode json parameter list.\n:status 401: Invalid auth token.\n:status 404: Replica not found."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list of not successfully declared files."),Object(l.b)("a",{name:"replicas.BadPFNs"}),"## BadPFNs Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class BadPFNs(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"replicas.BadPFNs.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Declare a list of bad PFNs."),Object(l.b)("p",null,".. :quickref: BadPFNs; Declare bad replicas."),Object(l.b)("p",null,":\\<json string pfns: The list of PFNs.\n:\\<json string reason: The reason of the loss.\n:\\<json string state: The state is eiher BAD, SUSPICIOUS or TEMPORARY_UNAVAILABLE.\n:\\<json string expires_at: The expiration date. Only apply to TEMPORARY_UNAVAILABLE.\n:resheader Content-Type: application/x-json-string\n:status 201: Created.\n:status 400: Cannot decode json parameter list.\n:status 401: Invalid auth token.\n:status 404: Replica not found."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":"),Object(l.b)("p",null,"A list of not successfully declared files."),Object(l.b)("a",{name:"replicas.Tombstone"}),"## Tombstone Objects",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"class Tombstone(ErrorHandlingMethodView)\n")),Object(l.b)("a",{name:"replicas.Tombstone.post"}),"#### post",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," | post()\n")),Object(l.b)("p",null,"Set a tombstone on a list of replicas."),Object(l.b)("p",null,".. :quickref: Tombstone; Set a tombstone on a list of replicas."),Object(l.b)("p",null,":\\<json string replicas: list fo replicas\n:resheader Content-Type: application/x-json-string\n:status 201: Created.\n:status 401: Invalid auth token.\n:status 404: ReplicaNotFound."),Object(l.b)("a",{name:"replicas.make_doc"}),"#### make\\_doc",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"make_doc()\n")),Object(l.b)("p",null,"Only used for sphinx documentation"))}i.isMDXComponent=!0},377:function(e,t,a){"use strict";a.d(t,"a",(function(){return i})),a.d(t,"b",(function(){return j}));var n=a(0),c=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,n,c=function(e,t){if(null==e)return{};var a,n,c={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(c[a]=e[a]);return c}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(c[a]=e[a])}return c}var p=c.a.createContext({}),o=function(e){var t=c.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},i=function(e){var t=o(e.components);return c.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},O=c.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,r=e.parentName,p=b(e,["components","mdxType","originalType","parentName"]),i=o(a),O=n,j=i["".concat(r,".").concat(O)]||i[O]||u[O]||l;return a?c.a.createElement(j,s(s({ref:t},p),{},{components:a})):c.a.createElement(j,s({ref:t},p))}));function j(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,r=new Array(l);r[0]=O;var s={};for(var b in t)hasOwnProperty.call(t,b)&&(s[b]=t[b]);s.originalType=e,s.mdxType="string"==typeof e?e:n,r[1]=s;for(var p=2;p<l;p++)r[p]=a[p];return c.a.createElement.apply(null,r)}return c.a.createElement.apply(null,a)}O.displayName="MDXCreateElement"}}]);
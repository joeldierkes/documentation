(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{289:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return a})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return s}));var o=n(3),r=n(7),l=(n(0),n(412)),i=["components"],b={title:"UploadClient"},a={unversionedId:"client_api/uploadclient",id:"client_api/uploadclient",isDocsHomePage:!1,title:"UploadClient",description:"\\\\init\\\\",source:"@site/../docs/client_api/uploadclient.md",sourceDirName:"client_api",slug:"/client_api/uploadclient",permalink:"/documentation/client_api/uploadclient",editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/client_api/uploadclient.md",version:"current",frontMatter:{title:"UploadClient"},sidebar:"docs",previous:{title:"TouchClient",permalink:"/documentation/client_api/touchclient"},next:{title:"Installing Rucio Server",permalink:"/documentation/installing_server"}},c=[{value:"__init__",id:"__init__",children:[]},{value:"upload",id:"upload",children:[]},{value:"_register_file",id:"_register_file",children:[]},{value:"_get_file_guid",id:"_get_file_guid",children:[]},{value:"_collect_file_info",id:"_collect_file_info",children:[]},{value:"_collect_and_validate_file_info",id:"_collect_and_validate_file_info",children:[]},{value:"_convert_file_for_api",id:"_convert_file_for_api",children:[]},{value:"_upload_item",id:"_upload_item",children:[]},{value:"_retry_protocol_stat",id:"_retry_protocol_stat",children:[]},{value:"_create_protocol",id:"_create_protocol",children:[]},{value:"_send_trace",id:"_send_trace",children:[]},{value:"_recursive",id:"_recursive",children:[]},{value:"preferred_impl",id:"preferred_impl",children:[]}],d={toc:c};function s(e){var t=e.components,n=Object(r.a)(e,i);return Object(l.b)("wrapper",Object(o.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"__init__"},"_","_","init","_","_"),Object(l.b)("p",null,"Initialises the basic settings for an UploadClient object"),Object(l.b)("table",{style:{border:"none"}},Object(l.b)("tbody",null,Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"_client"),": - Optional: rucio.client.client.Client object. If None, a new object will be created."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"logger"),": - Optional: logging.Logger object. If None, default logger will be used."))))),Object(l.b)("h2",{id:"upload"},"upload"),Object(l.b)("table",{style:{border:"none"}},Object(l.b)("tbody",null,Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"items"),": List of dictionaries. Each dictionary describing a file to upload. Keys:\npath                  - path of the file that will be uploaded\nrse                   - rse expression/name (e.g. 'CERN-PROD_DATADISK') where to upload the file\ndid_scope             - Optional: custom did scope (Default: user.\\<account",">",")\ndid_name              - Optional: custom did name (Default: name of the file)\ndataset_scope         - Optional: custom dataset scope\ndataset_name          - Optional: custom dataset name\nimpl                  - Optional: name of the protocol implementation to be used to upload this item.\nforce_scheme          - Optional: force a specific scheme (if PFN upload this will be overwritten) (Default: None)\npfn                   - Optional: use a given PFN (this sets no_register to True, and no_register becomes mandatory)\nno_register           - Optional: if True, the file will not be registered in the rucio catalogue\nregister_after_upload - Optional: if True, the file will be registered after successful upload\nlifetime              - Optional: the lifetime of the file after it was uploaded\ntransfer_timeout      - Optional: time after the upload will be aborted\nguid                  - Optional: guid of the file\nrecursive             - Optional: if set, parses the folder structure recursively into collections"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"summary_file_path"),": Optional: a path where a summary in form of a json file will be stored"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"traces_copy_out"),": reference to an external list, where the traces should be uploaded"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"ignore_availability"),": ignore the availability of a RSE"))),Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Raises"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"InputValidationError"),": if any input arguments are in a wrong format"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"RSEWriteBlocked"),": if a given RSE is not available for writing"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"NoFilesUploaded"),": if no files were successfully uploaded"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"NotAllFilesUploaded"),": if not all files were successfully uploaded"))),Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,"  0 on success"))))),Object(l.b)("h2",{id:"_register_file"},"_","register","_","file"),Object(l.b)("p",null,"Registers the given file in Rucio. Creates a dataset if"),Object(l.b)("p",null,"needed. Registers the file DID and creates the replication\nrule if needed. Adds a replica to the file did.\n(This function is meant to be used as class internal only)"),Object(l.b)("table",{style:{border:"none"}},Object(l.b)("tbody",null,Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"file"),": dictionary describing the file"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"registered_dataset_dids"),": set of dataset dids that were already registered"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"ignore_availability"),": ignore the availability of a RSE"))),Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Raises"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"DataIdentifierAlreadyExists"),": if file DID is already registered and the checksums do not match"))))),Object(l.b)("h2",{id:"_get_file_guid"},"_","get","_","file","_","guid"),Object(l.b)("p",null,"Get the guid of a file, trying different strategies"),Object(l.b)("p",null,"(This function is meant to be used as class internal only)"),Object(l.b)("table",{style:{border:"none"}},Object(l.b)("tbody",null,Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"file"),": dictionary describing the file"))),Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,"  the guid"))))),Object(l.b)("h2",{id:"_collect_file_info"},"_","collect","_","file","_","info"),Object(l.b)("p",null,"Collects infos (e.g. size, checksums, etc.) about the file and"),Object(l.b)("p",null,"returns them as a dictionary\n(This function is meant to be used as class internal only)"),Object(l.b)("table",{style:{border:"none"}},Object(l.b)("tbody",null,Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"filepath"),": path where the file is stored"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"item"),": input options for the given file"))),Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,"  a dictionary containing all collected info and the input options"))))),Object(l.b)("h2",{id:"_collect_and_validate_file_info"},"_","collect","_","and","_","validate","_","file","_","info"),Object(l.b)("p",null,"Checks if there are any inconsistencies within the given input"),Object(l.b)("p",null,"options and stores the output of _collect_file_info for every file\n(This function is meant to be used as class internal only)"),Object(l.b)("table",{style:{border:"none"}},Object(l.b)("tbody",null,Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"filepath"),": list of dictionaries with all input files and options"))),Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Raises"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"InputValidationError"),": if an input option has a wrong format"))),Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,"  a list of dictionaries containing all descriptions of the files to upload"))))),Object(l.b)("h2",{id:"_convert_file_for_api"},"_","convert","_","file","_","for","_","api"),Object(l.b)("p",null,"Creates a new dictionary that contains only the values"),Object(l.b)("p",null,"that are needed for the upload with the correct keys\n(This function is meant to be used as class internal only)"),Object(l.b)("table",{style:{border:"none"}},Object(l.b)("tbody",null,Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"file"),": dictionary describing a file to upload"))),Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,"  dictionary containing not more then the needed values for the upload"))))),Object(l.b)("h2",{id:"_upload_item"},"_","upload","_","item"),Object(l.b)("p",null,"Uploads a file to the connected storage."),Object(l.b)("table",{style:{border:"none"}},Object(l.b)("tbody",null,Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"rse_settings"),": dictionary containing the RSE settings"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"rse_attributes"),": dictionary containing the RSE attribute key value pairs"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"lfn"),": a single dict containing 'scope' and 'name'.\nExample:\n{'name': '1_rse_local_put.raw', 'scope': 'user.jdoe', 'filesize': 42, 'adler32': '87HS3J968JSNWID'}\nIf the 'filename' key is present, it will be used by Rucio as the actual name of the file on disk (separate from the Rucio 'name')."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"source_dir"),": path to the local directory including the source files"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"force_pfn"),": use the given PFN -- can lead to dark data, use sparingly"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"force_scheme"),": use the given protocol scheme, overriding the protocol priority in the RSE description"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"transfer_timeout"),": set this timeout (in seconds) for the transfers, for protocols that support it"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"sign_service"),": use the given service (e.g. gcs, s3, swift) to sign the URL"))),Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Raises"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"RucioException(msg)"),": general exception with msg for more details."))))),Object(l.b)("h2",{id:"_retry_protocol_stat"},"_","retry","_","protocol","_","stat"),Object(l.b)("p",null,"Try to stat file, on fail try again 1s, 2s, 4s, 8s, 16s, 32s later. Fail is all fail"),Object(l.b)("table",{style:{border:"none"}},Object(l.b)("tbody",null,Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"protocol"),": The protocol to use to reach this file"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"pfn"),": Physical file name of the target for the protocol stat"))))),Object(l.b)("h2",{id:"_create_protocol"},"_","create","_","protocol"),Object(l.b)("p",null,"Protol construction."),Object(l.b)("table",{style:{border:"none"}},Object(l.b)("tbody",null,Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"rse_settings"),": rse_settings"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"operation"),": activity, e.g. read, write, delete etc."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"force_scheme"),": custom scheme"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"auth_token"),": Optionally passing JSON Web Token (OIDC) string for authentication"))))),Object(l.b)("h2",{id:"_send_trace"},"_","send","_","trace"),Object(l.b)("p",null,"Checks if sending trace is allowed and send the trace."),Object(l.b)("table",{style:{border:"none"}},Object(l.b)("tbody",null,Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"trace"),": the trace"))))),Object(l.b)("h2",{id:"_recursive"},"_","recursive"),Object(l.b)("p",null,"If the --recursive flag is set, it replicates the folder structure recursively into collections"),Object(l.b)("p",null,"A folder only can have either other folders inside or files, but not both of them"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"- If it has folders, the root folder will be a container\n- If it has files, the root folder will be a dataset\n- If it is empty, it does not create anything\n")),Object(l.b)("table",{style:{border:"none"}},Object(l.b)("tbody",null,Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"item"),": dictionary containing all descriptions of the files to upload"))))),Object(l.b)("h2",{id:"preferred_impl"},"preferred","_","impl"),Object(l.b)("p",null,"Finds the optimum protocol impl preferred by the client and"),Object(l.b)("p",null,"supported by the remote RSE."),Object(l.b)("table",{style:{border:"none"}},Object(l.b)("tbody",null,Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"rse_settings"),": dictionary containing the RSE settings"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"domain"),": The network domain, either 'wan' (default) or 'lan'"))),Object(l.b)("tr",{style:{border:"none"}},Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Raises"),":")),Object(l.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"RucioException(msg)"),": general exception with msg for more details."))))))}s.isMDXComponent=!0},412:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return O}));var o=n(0),r=n.n(o);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),d=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},s=function(e){var t=d(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),s=d(n),u=o,O=s["".concat(i,".").concat(u)]||s[u]||p[u]||l;return n?r.a.createElement(O,b(b({ref:t},c),{},{components:n})):r.a.createElement(O,b({ref:t},c))}));function O(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=u;var b={};for(var a in t)hasOwnProperty.call(t,a)&&(b[a]=t[a]);b.originalType=e,b.mdxType="string"==typeof e?e:o,i[1]=b;for(var c=2;c<l;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);
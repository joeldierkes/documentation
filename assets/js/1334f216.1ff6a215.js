(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{378:function(e,n,r){"use strict";r.d(n,"a",(function(){return p})),r.d(n,"b",(function(){return d}));var t=r(0),o=r.n(t);function c(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){c(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},c=Object.keys(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=o.a.createContext({}),s=function(e){var n=o.a.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=s(e.components);return o.a.createElement(u.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},m=o.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,c=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(r),m=t,d=p["".concat(i,".").concat(m)]||p[m]||f[m]||c;return r?o.a.createElement(d,a(a({ref:n},u),{},{components:r})):o.a.createElement(d,a({ref:n},u))}));function d(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var c=r.length,i=new Array(c);i[0]=m;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:t,i[1]=a;for(var u=2;u<c;u++)i[u]=r[u];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},85:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return a})),r.d(n,"metadata",(function(){return l})),r.d(n,"toc",(function(){return u})),r.d(n,"default",(function(){return p}));var t=r(3),o=r(7),c=(r(0),r(378)),i=["components"],a={title:"Running rucio-necromancer"},l={unversionedId:"bin/rucio-necromancer",id:"bin/rucio-necromancer",isDocsHomePage:!1,title:"Running rucio-necromancer",description:"`",source:"@site/../docs/bin/rucio-necromancer.md",sourceDirName:"bin",slug:"/bin/rucio-necromancer",permalink:"/documentation/bin/rucio-necromancer",editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio-necromancer.md",version:"current",frontMatter:{title:"Running rucio-necromancer"}},u=[],s={toc:u};function p(e){var n=e.components,r=Object(o.a)(e,i);return Object(c.b)("wrapper",Object(t.a)({},s,r,{components:n,mdxType:"MDXLayout"}),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"usage: rucio-necromancer [-h] [--run-once] [--threads THREADS] [--bulk BULK]\n                         [--sleep-time SLEEP_TIME]\n\nThe Necromancer daemon is responsible for managing bad replicas. If a replica\nthat got declared bad has other replicas, it will try to recover it by\nrequesting a new transfer. If there are no replicas anymore, then the file\ngets marked as lost.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --run-once            Runs one loop iteration\n  --threads THREADS     Concurrency control: number of threads\n  --bulk BULK           Bulk control: number of requests per cycle\n  --sleep-time SLEEP_TIME\n                        Concurrency control: thread sleep time after each\n                        chunk of work\n\nLost replica: In this example the file gets uploaded and will only have this\nreplica as there are no replication rules. If it gets declared bad, there will\nbe no replica to recover from. Therefor the replica gets marked as lost.\nUpload a file:: $ rucio upload --scope mock --rse MOCK --name file\nfilename.txt Check replicas:: $ rucio list-file-replicas mock:file +---------+\n--------+------------+-----------+--------------------------------------------\n-------------+ | SCOPE | NAME | FILESIZE | ADLER32 | RSE: REPLICA | |---------\n+--------+------------+-----------+-------------------------------------------\n--------------| | mock | file | 149.000 B | 948240 | MOCK:\nfile://localhost:0/tmp/rucio_rse/mock/fb/d1/file | +---------+--------+-------\n-----+-----------+---------------------------------------------------------+\nDeclare it as bad:: $ rucio-admin replicas declare-bad\nfile://localhost:0/tmp/rucio_rse/mock/fb/d1/file --reason 'bad' Run the\ndaemon:: $ rucio-necromancer --run-once Check replicas again:: $ rucio list-\nfile-replicas mock:file\n+---------+--------+------------+-----------+----------------+ | SCOPE | NAME\n| FILESIZE | ADLER32 | RSE: REPLICA |\n|---------+--------+------------+-----------+----------------|\n+---------+--------+------------+-----------+----------------+ Bad replica: In\nthis example the file gets uploaded and will have two replicas. If it gets\ndeclared bad, then the daemon will try to recover it from the second replica.\nUpload a file and replicate it:: $ rucio upload --scope mock --rse MOCK\nfilename.txt $ rucio add-rule mock:file 1 MOCK2 $ rucio-conveyor-submitter\n--run-once Check replicas:: $ rucio list-file-replicas mock:file +---------+--\n------+------------+-----------+----------------------------------------------\n-----------+ | SCOPE | NAME | FILESIZE | ADLER32 | RSE: REPLICA | |---------+-\n-------+------------+-----------+---------------------------------------------\n------------| | mock | file | 149.000 B | 948240 | MOCK:\nfile://localhost:0/tmp/rucio_rse/mock/fb/d1/file | |---------+--------+-------\n-----+-----------+---------------------------------------------------------| |\nmock | file | 149.000 B | 948240 | MOCK2:\nfile://localhost:1/tmp/rucio_rse/mock/fb/d1/file | +---------+--------+-------\n-----+-----------+---------------------------------------------------------+\nDeclare one replica as bad:: $ rucio-admin replicas declare-bad\nfile://localhost:1/tmp/rucio_rse/mock/fb/d1/file --reason 'bad' Run the\ndaemon:: $ rucio-necromancer --run-once Check replicas again:: $ rucio list-\nfile-replicas mock:file +---------+--------+------------+-----------+---------\n------------------------------------------------+ | SCOPE | NAME | FILESIZE |\nADLER32 | RSE: REPLICA | |---------+--------+------------+-----------+--------\n-------------------------------------------------| | mock | file | 149.000 B |\n948240 | MOCK: file://localhost:0/tmp/rucio_rse/mock/fb/d1/file | |---------+-\n-------+------------+-----------+---------------------------------------------\n------------| | mock | file | 149.000 B | 948240 | MOCK2:\nfile://localhost:1/tmp/rucio_rse/mock/fb/d1/file | +---------+--------+-------\n-----+-----------+---------------------------------------------------------+\n")))}p.isMDXComponent=!0}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{188:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return d}));var n=a(3),s=a(7),i=(a(0),a(412)),r=["components"],l={title:"DQ2Client"},o={unversionedId:"client_api/dq2client",id:"client_api/dq2client",isDocsHomePage:!1,title:"DQ2Client",description:"validate\\time\\formats",source:"@site/../docs/client_api/dq2client.md",sourceDirName:"client_api",slug:"/client_api/dq2client",permalink:"/documentation/client_api/dq2client",editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/client_api/dq2client.md",version:"current",frontMatter:{title:"DQ2Client"},sidebar:"docs",previous:{title:"FileDownloadState",permalink:"/documentation/client_api/downloadclient"},next:{title:"ExportClient",permalink:"/documentation/client_api/exportclient"}},c=[{value:"validate_time_formats",id:"validate_time_formats",children:[]},{value:"extract_scope",id:"extract_scope",children:[]},{value:"__init__",id:"__init__",children:[]},{value:"finger",id:"finger",children:[]},{value:"bulkDeleteDatasetReplicas",id:"bulkdeletedatasetreplicas",children:[]},{value:"cancelReplicaDeletions",id:"cancelreplicadeletions",children:[]},{value:"checkDatasetConsistency",id:"checkdatasetconsistency",children:[]},{value:"closeDataset",id:"closedataset",children:[]},{value:"declareBadFiles",id:"declarebadfiles",children:[]},{value:"declareSuspiciousFiles",id:"declaresuspiciousfiles",children:[]},{value:"deleteDatasetReplicas",id:"deletedatasetreplicas",children:[]},{value:"deleteDatasetSubscription",id:"deletedatasetsubscription",children:[]},{value:"deleteDatasetSubscriptions",id:"deletedatasetsubscriptions",children:[]},{value:"deleteDatasetVersionSubscriptions",id:"deletedatasetversionsubscriptions",children:[]},{value:"deleteDatasetsFromContainer",id:"deletedatasetsfromcontainer",children:[]},{value:"deleteFilesFromDataset",id:"deletefilesfromdataset",children:[]},{value:"eraseDataset",id:"erasedataset",children:[]},{value:"freezeDataset",id:"freezedataset",children:[]},{value:"getDatasetSize",id:"getdatasetsize",children:[]},{value:"getMasterReplicaLocation",id:"getmasterreplicalocation",children:[]},{value:"getMetaDataAttribute",id:"getmetadataattribute",children:[]},{value:"getNumberOfFiles",id:"getnumberoffiles",children:[]},{value:"getState",id:"getstate",children:[]},{value:"getVersionMetadata",id:"getversionmetadata",children:[]},{value:"listDatasetReplicas",id:"listdatasetreplicas",children:[]},{value:"listDatasetReplicasInContainer",id:"listdatasetreplicasincontainer",children:[]},{value:"listDatasets",id:"listdatasets",children:[]},{value:"listDatasets2",id:"listdatasets2",children:[]},{value:"listDatasetsByCreationDate",id:"listdatasetsbycreationdate",children:[]},{value:"listDatasetsByGUIDs",id:"listdatasetsbyguids",children:[]},{value:"listDatasetsByMetaData",id:"listdatasetsbymetadata",children:[]},{value:"listDatasetsByNameInSite",id:"listdatasetsbynameinsite",children:[]},{value:"listDatasetsInContainer",id:"listdatasetsincontainer",children:[]},{value:"listDatasetsInSite",id:"listdatasetsinsite",children:[]},{value:"listFileReplicas",id:"listfilereplicas",children:[]},{value:"listFileReplicasBySites",id:"listfilereplicasbysites",children:[]},{value:"listFilesInDataset",id:"listfilesindataset",children:[]},{value:"listMetaDataAttributes",id:"listmetadataattributes",children:[]},{value:"listMetaDataReplica",id:"listmetadatareplica",children:[]},{value:"listSubscriptionInfo",id:"listsubscriptioninfo",children:[]},{value:"listSubscriptions",id:"listsubscriptions",children:[]},{value:"listSubscriptionsInSite",id:"listsubscriptionsinsite",children:[]},{value:"listSuspiciousFiles",id:"listsuspiciousfiles",children:[]},{value:"ping",id:"ping",children:[]},{value:"queryReplicaHistory",id:"queryreplicahistory",children:[]},{value:"queryStorageUsage",id:"querystorageusage",children:[]},{value:"queryStorageUsageHistory",id:"querystorageusagehistory",children:[]},{value:"registerContainer",id:"registercontainer",children:[]},{value:"registerDatasetLocation",id:"registerdatasetlocation",children:[]},{value:"registerDatasetSubscription",id:"registerdatasetsubscription",children:[]},{value:"registerDatasetsInContainer",id:"registerdatasetsincontainer",children:[]},{value:"registerFilesInDataset",id:"registerfilesindataset",children:[]},{value:"registerFilesInDatasets",id:"registerfilesindatasets",children:[]},{value:"registerNewDataset",id:"registernewdataset",children:[]},{value:"registerNewDataset2",id:"registernewdataset2",children:[]},{value:"registerNewVersion",id:"registernewversion",children:[]},{value:"registerNewVersion2",id:"registernewversion2",children:[]},{value:"resetSubscription",id:"resetsubscription",children:[]},{value:"resetSubscriptionsInSite",id:"resetsubscriptionsinsite",children:[]},{value:"searchDatasets",id:"searchdatasets",children:[]},{value:"setDatasetReplicaToDeleted",id:"setdatasetreplicatodeleted",children:[]},{value:"setMetaDataAttribute",id:"setmetadataattribute",children:[]},{value:"setReplicaMetaDataAttribute",id:"setreplicametadataattribute",children:[]},{value:"verifyFilesInDataset",id:"verifyfilesindataset",children:[]}],b={toc:c};function d(e){var t=e.components,a=Object(s.a)(e,r);return Object(i.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"validate_time_formats"},"validate","_","time","_","formats"),Object(i.b)("h2",{id:"extract_scope"},"extract","_","scope"),Object(i.b)("h2",{id:"__init__"},"_","_","init","_","_"),Object(i.b)("h2",{id:"finger"},"finger"),Object(i.b)("p",null,"User information lookup program."),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null,Object(i.b)("tr",{style:{border:"none"}},Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":")),Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"userId"),": The userId (Distinguished Name or account/nickname)."))),Object(i.b)("tr",{style:{border:"none"}},Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":")),Object(i.b)("td",{style:{border:"none",backgroundColor:"white",verticalAlign:"top"}},Object(i.b)("p",null,"  A dictionary with the name nickname, email, dn.\nB{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- AccountNotFound is raised in case the account doesn't exist.\n")))))),Object(i.b)("h2",{id:"bulkdeletedatasetreplicas"},"bulkDeleteDatasetReplicas"),Object(i.b)("p",null,"ToDo MARTIN"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"cancelreplicadeletions"},"cancelReplicaDeletions"),Object(i.b)("p",null,"Cancel deletion request for a replica. In Rucio does nothing."),Object(i.b)("p",null,"@param dsn: is the dataset.\n@param locations: is a list with the dataset replica locations.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"checkdatasetconsistency"},"checkDatasetConsistency"),Object(i.b)("p",null,"This method does nothing in Rucio since there is no tracker. We just check if the dataset exist (by running a get metadata)."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"closedataset"},"closeDataset"),Object(i.b)("p",null,"Closes the latest dataset version."),Object(i.b)("p",null,"@since: 0.2.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- UnsupportedOperation is raised in case the dataset is already closed.\n")),Object(i.b)("p",null,"@return True"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"declarebadfiles"},"declareBadFiles"),Object(i.b)("p",null,"ToDo Cedric"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"declaresuspiciousfiles"},"declareSuspiciousFiles"),Object(i.b)("p",null,"ToDo Cedric"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"deletedatasetreplicas"},"deleteDatasetReplicas"),Object(i.b)("p",null,"Delete the dataset replica from the given site."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param locations: is a list with the dataset replica locations.\n@param version: is the dataset version number.\n@param ignore_pin: is an option to ignore the replica pin.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- AccessDenied in case the account cannot delete the rule.\n")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"deletedatasetsubscription"},"deleteDatasetSubscription"),Object(i.b)("p",null,"Removes the dataset/dataset version subscription of the given dataset name from the given site. In Rucio does nothing."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param site: is the subscription dq2.location.\n@param version: is the dataset version number (None is passed the duid will be used).\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"deletedatasetsubscriptions"},"deleteDatasetSubscriptions"),Object(i.b)("p",null,"Marks all dataset/dataset version subscriptions of the given dataset. In Rucio does nothing."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"deletedatasetversionsubscriptions"},"deleteDatasetVersionSubscriptions"),Object(i.b)("p",null,"Removes all subscriptions of the given dataset version. In Rucio does nothing"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param version: is the dataset version number\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"deletedatasetsfromcontainer"},"deleteDatasetsFromContainer"),Object(i.b)("p",null,"Remove datasets from a container."),Object(i.b)("p",null,"@param name: name of the container.\n@type name: str\n@param datasets: list of datasets to be registered.\n","[dataset_name1, ..., dataset_nameN]","\n@type datasets: list"),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the container or dataset name doesn't exist.\n")),Object(i.b)("p",null,"@see: ",Object(i.b)("a",{parentName:"p",href:"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0004"},"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0004")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"deletefilesfromdataset"},"deleteFilesFromDataset"),Object(i.b)("p",null,"Removes files from an existing dataset. Files are"),Object(i.b)("p",null,"removed from the latest open version only."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param guids: is a list of file unique identifiers (GUID).\nNote: the GUID is typically assigned by external tools\n(e.g. POOL) and must be passed along as is.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: List of lfns that failed to be added since they are duplicates?"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"erasedataset"},"eraseDataset"),Object(i.b)("p",null,"Deletes the subscriptions and the locations"),Object(i.b)("p",null,"@param dsn: is the dataset name\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: List of statuses for subscription and deletion deletions"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"freezedataset"},"freezeDataset"),Object(i.b)("p",null,"Freezes a dataset."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- UnsupportedOperation is raised in case the dataset is already closed.\n")),Object(i.b)("p",null,"@return True"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"getdatasetsize"},"getDatasetSize"),Object(i.b)("p",null,"Used to get the dataset size"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: Size as integer"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"getmasterreplicalocation"},"getMasterReplicaLocation"),Object(i.b)("p",null,"Returns the master replicas location, in Rucio, this is the oldest rule."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param version: the version (not used in Rucio.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"getmetadataattribute"},"getMetaDataAttribute"),Object(i.b)("p",null,"Get the metadata information for the given dataset/dataset version. In Rucio the version is ignored."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param attributes: is a list of dataset metadata attributes.\n@param version: is the dataset version (0 is the latest).\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- InvalidMetadata is raised in case the metadata doesn't exist.\n")),Object(i.b)("p",null,"@return Dictionary in the following format:\n{'attribute_1': value_1, ..., 'attribute_N': value_N}"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"getnumberoffiles"},"getNumberOfFiles"),Object(i.b)("p",null,"Returns the number of files in the given dataset (or dataversion). In Rucio the version is ignored."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param version: is the dataset version number. Ignored in Rucio.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: Number of files (integer)"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"getstate"},"getState"),Object(i.b)("p",null,"Returns the dataset state."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: The dataset state (check L{dq2.common.DQConstants.DatasetState\\<common.DQConstants.DatasetState",">","})."),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"getversionmetadata"},"getVersionMetadata"),Object(i.b)("p",null,"Retrieve data set version metadata."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param version: is the dataset version number. Ignored in Rucio.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: duid_10, vuid_10, version, versioncreationdate, tier0state, tier0type, numberfiles, size\n@rtype: tuple"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listdatasetreplicas"},"listDatasetReplicas"),Object(i.b)("p",null,"List the dataset replicas."),Object(i.b)("p",null,"@param dsn\n@param version: 0, no version in Rucio\n@param complete:\n@param old: if old=True, call list_data_locks(), otherwise call list_replicas()\n@param scope:"),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- InvalidMetadata is raised in case the metadata doesn't exist.\n")),Object(i.b)("p",null,"@return Dictionary in the following format:\n{'rse_1':","[{'attribute_1': value_1, ..., 'attribute_N': value_N}]",",'rse_2':","[{...}]","}"),Object(i.b)("p",null,"@Rucio\n@pdn: always be ''\n@archived: should be 'primary' or 'custodial' for replicas without lifetime and 'secondary' for replicas with lifetime.\n@version: always be 0\n@transferState: If one the files is replicating, transferState=1, otherwise 0\n@chekState: always be 6\n@immutable: should be 0 for open datasets and 1 for closed datasets."),Object(i.b)("p",null,"@get_dataset_locks will help when option old=True is used"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listdatasetreplicasincontainer"},"listDatasetReplicasInContainer"),Object(i.b)("p",null,"ToDo -",">"," Jingya You"),Object(i.b)("p",null,"@return: a dictionary containing all dataset replicas for the container.\n{ \\<dataset_1",">",":\n{\\<vuid",">",": {0: ","[\\<site_1",">]",", 1: ","[\\<site_2",">",",\\<site_3",">]","}},\n\\<dataset_2",">",":\n{\\<vuid",">",": {0: ","[\\<site_1",">]",", 1: ","[\\<site_2",">",",\\<site_3",">]","}},\n...}\n@0:Incomplete, 1:Complete"),Object(i.b)("p",null,"({'rse_id': row.rse_id,\n'scope': row.scope,\n'name': row.name,\n'rule_id': row.rule_id,\n'account': row.account,\n'state': row.state})"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listdatasets"},"listDatasets"),Object(i.b)("p",null,"ToDo -",">"," Jingya You"),Object(i.b)("p",null,"Used to return a list of datasets matching the given\npattern and version."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param version: is the dataset version number.\n@param onlyNames: Option to return only the dataset names.\n@param rpp: Print rrp first results.\n@param p: Specify page to print.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"@DQ2\nB{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DQDaoException is raised,\n    in case there is a python or database error in the central catalogs.\n")),Object(i.b)("p",null,"usage::\nlistDatasets('myname') - returns all versions of the given dataset\nlistDatasets('myname",Object(i.b)("em",{parentName:"p"},"') - returns all versions of the datasets that start by 'myname'.\nlistDatasets('"),"myname') - returns all versions of the datasets that end by 'myname'. -",">"," this should be avoid"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"listDatasets('myname', 2) - returns the version 2 of dataset 'myname'.\nlistDatasets('myname', 0) - returns the latest version of the dataset 'myname'.\nlistDatasets('myname', \\<0) - returns all the versions of the dataset 'myname'.\nlistDatasets('myname', ]-infinite, 0[) - returns all the versions of the dataset 'myname'.\n\nlistDatasets('myname*', 2) - returns the version 2 of the datasets that start by 'myname'.\nlistDatasets('*myname', None) - returns all the versions of the datasets that end with 'myname'.\n")),Object(i.b)("p",null,"@return: Dictionary containing the dataset versions information.\n{\n'dataset_nameA': {'duid': duid, 'vuids': ","['A_vuid_for_version1+X', ..., 'A_vuid_for_version1']","}\n'dataset_nameB': {'duid': duid, 'vuids': ","['B_vuid_for_version1']","}\n}, where X ",">"," 0"),Object(i.b)("p",null,"@Rucio\n@return: No version in Rucio\n{\n'dataset_nameA': {'duid': rucio_did, 'vuids': ","[rucio_did]","},\n'dataset_nameB': {'duid': rucio_did, 'vuids': ","[rucio_did]","}...\n}"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listdatasets2"},"listDatasets2"),Object(i.b)("p",null,"ToDo -",">"," Jingya You"),Object(i.b)("p",null,"Used to return a list of datasets matching the given\npattern and version.\nIn DQ2 the autorized metadata are :\nstate, type, name, duid, duid_10, vuid, version, creationdate, closeddate, deleteddate, frozendate,\nmodifieddate, tier0state, origin, tier0state, tier0type, physicsgroup\nIn Rucio the authorized metadata are :\nstate, type, name"),Object(i.b)("p",null,"@param metaDataAttributes: metadata attibutes for the sorting\n@param long: List dataset in long format (total sum for all the file sizes + total num of files).\n@param all_: List all datasets, including the hidden ones.\n@param rpp: Print rrp first results.\n@param p: Specify page to print."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- InvalidMetadata is raised in case the metadata doesn't exist.\n")),Object(i.b)("p",null,"usage::\nlistDatasets(metaDataAttributes={name:'myname'}) - returns all datasets matching the pattern"),Object(i.b)("p",null,"@return: Dictionary containing the dataset information.\n{\n'dataset_nameA': {}\n'dataset_nameB': {}\n}"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listdatasetsbycreationdate"},"listDatasetsByCreationDate"),Object(i.b)("p",null,"ToDo"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listdatasetsbyguids"},"listDatasetsByGUIDs"),Object(i.b)("p",null,"Returns a dictionary mapping guid to dataset names."),Object(i.b)("p",null,"@since: 0.3.1"),Object(i.b)("p",null,"@param guids: a list of guids"),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- RucioException is raised in case of exception.\n")),Object(i.b)("p",null,"@return: Returns the guid-",">","dataset names mapping.::\n{'guid': ","[dsnX, dsnY]","}\nor\n{}"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listdatasetsbymetadata"},"listDatasetsByMetaData"),Object(i.b)("p",null,"List the dataset versions that match the given criteria."),Object(i.b)("p",null,"In DQ2 the autorized metadata are :\nstate, type, name, duid, duid_10, vuid, version, creationdate, closeddate, deleteddate, frozendate,\nmodifieddate, tier0state, origin, tier0state, tier0type, physicsgroup\nIn Rucio the authorized metadata are :\nstate, type, name"),Object(i.b)("p",null,"@param filter_: list containing dictionaries of metadata attributes and values\n({'attrname_0': attrvalue_0, ..., 'attrname_N': attrvalue_N})."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- InvalidMetadata is raised in case the metadata doesn't exist.\n")),Object(i.b)("p",null,"@return: List of tuples with (dataset name, version).\n","[\n('dataset_name_1', 'vuid_1'),\n(...),\n('dataset_name_N', 'vuid_N')\n]"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listdatasetsbynameinsite"},"listDatasetsByNameInSite"),Object(i.b)("p",null,"List datasets at site"),Object(i.b)("p",null,"@param site: is the location to be searched for.\n@param complete: is the location state of the dataset at a site and may have\nthe following values: None: in which case the\nlocation state is ignore; LocationState.COMPLETE: lists only datasets\nfully present at the site (no files missing);\nLocationState.INCOMPLETE: lists only datasets partially present at the\nsite (some files missing).\n@param page: is the page to be displayed.\n@param rpp: are the results per page.\n@param group: Not used"),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- RSENotFound is raised in case the site doesn't exist.\n")),Object(i.b)("p",null,"@return: Tuple of dataset.\n('dsn1', 'dsn2'... )"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listdatasetsincontainer"},"listDatasetsInContainer"),Object(i.b)("p",null,"ToDo -",">"," Jingya You"),Object(i.b)("p",null,"@param cn: container name\n@return: Not found in DQ2\n@Rucio's return\n","[{u'adler32': None, u'name': u'2013-12-30_11', u'bytes': None, u'scope': u'ams-2014-ISS.B700-pass5', u'type': u'DATASET', u'md5': None}, \\\n{u'adler32': None, u'name': u'2013-12-30_12', u'bytes': None, u'scope': u'ams-2014-ISS.B700-pass5', u'type': u'DATASET', u'md5': None}, ....]"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listdatasetsinsite"},"listDatasetsInSite"),Object(i.b)("p",null,"List all the datasets and their versions available on"),Object(i.b)("p",null,"the given site."),Object(i.b)("p",null,"@param site: is the location to be searched for.\n@param complete: is the location state of the dataset at a site and may have\nthe following values: None: in which case the\nlocation state is ignore; LocationState.COMPLETE: lists only datasets\nfully present at the site (no files missing);\nLocationState.INCOMPLETE: lists only datasets partially present at the\nsite (some files missing).\n@param page: is the page to be displayed.\n@param rpp: are the results per page."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- RSENotFound is raised in case the site doesn't exist.\n")),Object(i.b)("p",null,"@return: List of dataset versions.\n{'dsn': ","[version_numberX,... version_numberY]","}"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listfilereplicas"},"listFileReplicas"),Object(i.b)("p",null,"@param dsn is the dataset name."),Object(i.b)("p",null,"@param version is the dataset version number.\n@param scope: is the dataset scope.\n@param location is the location place of the dataset\nB{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@ return dictionnary e.g.:\n{'content': ","[guid1,...]",", 'transferState': 1, 'length': 46018142, 'checkstate': 6, 'found': 200, 'total': 200, 'immutable': 1}]"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listfilereplicasbysites"},"listFileReplicasBySites"),Object(i.b)("p",null,"Iterator to list file replica with info refresh if needed."),Object(i.b)("p",null,"@param dsn: String - Dataset name to check.\n@param version: Number - Dataset version to check, don't need to be implanted in Rucio.\n@param locations: List of locations. Restrict result to a subset of locations.\n@param threshold:  in seconds. Refresh info if checkdate \\< sysdate - threshold. #not implanted\n@param timeout:  in seconds. #neccessary? There's no timeout exception in rucio.common.exception\n@param scope: is the dataset scope."),Object(i.b)("p",null,"@raise No replicas found, timeout"),Object(i.b)("p",null,"@Rucio\n@version: always be 0\n@transferState: If the files are replicating, transferState=1, otherwise 0\n@checkState: always be 6\n@immutable: should be 0 for open datasets and 1 for closed datasets.\n@get_dataset_locks will help when option old=True is used"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listfilesindataset"},"listFilesInDataset"),Object(i.b)("p",null,"Given a dataset name, and optional version, the guids"),Object(i.b)("p",null,"and lfns of the files in the dataset are returned."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param version: is the dataset version number (0 =",">"," the latest version). not in Rucio\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions}:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DQDaoException is raised,\n    in case there is a python or database error in the central catalogs.\n- DQUnknownDatasetException is raised,\n    in case there is no dataset with the given name.\n")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listmetadataattributes"},"listMetaDataAttributes"),Object(i.b)("p",null,"ToDo"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listmetadatareplica"},"listMetaDataReplica"),Object(i.b)("p",null,"Returns a list containing all metadata attributes for dataset replicas."),Object(i.b)("p",null,"@param scope: is the dataset scope."),Object(i.b)("p",null,"@since: 0.4.0"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listsubscriptioninfo"},"listSubscriptionInfo"),Object(i.b)("p",null,"@param dsn: the dataset name."),Object(i.b)("p",null,"@version: the dataset version. Ignored in Rucio.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: tuple containing the dataset subscription information is returned.::\n(uid, owner, location, destination, creationdate, modifieddate, callbacks, archived, sources_policy, wait_for_sources, sources, query_more_sources, share)"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listsubscriptions"},"listSubscriptions"),Object(i.b)("p",null,"Return a list of sites that have subscribed the given dataset."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param version: is the dataset version number (0 is the latest).\n@param archived: is the dataset subscription state.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: List containing the sites that subscribed, at least, a version of the dataset."),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listsubscriptionsinsite"},"listSubscriptionsInSite"),Object(i.b)("p",null,"Returns a dict of all subscribed uids in a site containing all attributes."),Object(i.b)("p",null,"@param site: is the dataset subscription dq2.location.\n@param long: List dataset in long format (total sum for all the file sizes + total num of files)."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- RSENotFound is raised in case the site doesn't exist.\n")),Object(i.b)("p",null,"@return: Returns a list of all subscribed uids in a site containing all attributes.\n{'dsn': ","[versionX, versionY]","}"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"listsuspiciousfiles"},"listSuspiciousFiles"),Object(i.b)("p",null,"ToDo"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"ping"},"ping"),Object(i.b)("p",null,"Checks if the Rucio clients are well configured."),Object(i.b)("p",null,"@return: dictionary containing the client's configuration settings.::\n{\n'rucio'      : (url_insecure, url_secure, alive),\n}"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"queryreplicahistory"},"queryReplicaHistory"),Object(i.b)("p",null,"ToDo"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"querystorageusage"},"queryStorageUsage"),Object(i.b)("p",null,"Returns a tuple containing storage usage infos ."),Object(i.b)("p",null,"@since: 0.4.6"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"querystorageusagehistory"},"queryStorageUsageHistory"),Object(i.b)("p",null,"Returns a tuple containing storage usage evolution."),Object(i.b)("p",null,"@since: 0.4.*"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"registercontainer"},"registerContainer"),Object(i.b)("p",null,"Creates a container."),Object(i.b)("p",null,"@since: 1.0"),Object(i.b)("p",null,"@param name: name of the container.\n@type name: str\n@param datasets: list of datasets to be registered.\n","[dataset_name1, ..., dataset_nameN]","\n@type datasets: list"),Object(i.b)("p",null,"@see: ",Object(i.b)("a",{parentName:"p",href:"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0001"},"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0001")),Object(i.b)("p",null,"@raise DQContainerExistsException:\nin case a container with the same name already exists."),Object(i.b)("p",null,"@return: None\n@rtype: NoneType"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"registerdatasetlocation"},"registerDatasetLocation"),Object(i.b)("p",null,"Register new replica of a dataset(which must already defined in the repository)"),Object(i.b)("p",null,'@param dsn: is the dataset name.\n@param location: is the dataset dq2.location.(map to rucio RSE?)\n@param version: is the dataset version number.\n@param complete: is the location state of the dataset at a site and may have the following values:\nNone: in which case the location state is ignore;\nLocationState.COMPLETE: lists only datasets fully present at the site (no files missing);\nLocationState.INCOMPLETE: lists only datasets partially present at the site (some files missing).\n@param acl_alias: is the  acl_alias, e.g. custodial which will be assocaited with the replica.\n@param archived: Obsolete argument (still here to maintain backward compatibility).\n@param lifetime: Dataset replica lifetime. Acceptable formats are: "X days" or "X days, HH:MM:SS" or "HH:MM:SS".\n@param pin_lifetime: Pin replica lifetime. Acceptable formats are: "X days" or "X days, HH:MM:SS" or "HH:MM:SS".\n@param activity: is the activity.\n@param scope: is the dataset scope.'),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- UnsupportedOperation is raised in case the location does not exist.\n")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"registerdatasetsubscription"},"registerDatasetSubscription"),Object(i.b)("p",null,"Register a new subscription in the location catalog. If the"),Object(i.b)("p",null,"version is not specified a duid is used."),Object(i.b)("p",null,"@since: 0.2.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param location: is the location where the dataset should be subscribed.\n@param version: not used.\n@param archived: to define rule type.\n@param callbacks: is a dictionary which specifies, per subscription callback.\n@sources: not used.\n@destination: not used.\n@query_more_sources: not used.\n@sshare: not used yet.\n@group: not used.\n@owner: not used yet.\n@activity: is the activity.\n@acl_alias: not used.\n@replica_lifetime: is the replica lifetime.\n@check_destination: not used.\n@parentId: not used.\n@pin_lifetime: not used.\n@param scope: is the dataset scope."),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"registerdatasetsincontainer"},"registerDatasetsInContainer"),Object(i.b)("p",null,"ToDo Ookey"),Object(i.b)("p",null,"Register datasets into a container."),Object(i.b)("p",null,"@param name: name of the container.\n@type name: str\n@param datasets: list of datasets to be registered.\n","[dataset_name1, ..., dataset_nameN]","\n@type datasets: list\n@param scope: is the dataset scope."),Object(i.b)("p",null,"@since: 1.0"),Object(i.b)("p",null,"@raise DQContainerIsInStateException:\nin case the container is closed or archived.\n@raise DQContainerNotOwner:\nin case the user is not the owner of the container.\n@raise DQContainerUnknownException:\nin case the container does not exist."),Object(i.b)("p",null,"@see: ",Object(i.b)("a",{parentName:"p",href:"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0003"},"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0003"),"\n@see: ",Object(i.b)("a",{parentName:"p",href:"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0010"},"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0010"),"\n@see: ",Object(i.b)("a",{parentName:"p",href:"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0011"},"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0011")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"registerfilesindataset"},"registerFilesInDataset"),Object(i.b)("p",null,"Add existing files to an existing dataset.(attach file to dataset)"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param lfns: is a list of logical filenames (LFN).\n@param guids: is a list of file unique identifiers (GUID).\n@param sizes: is a list of the file sizes.\n@param checksums: is a list of the file checksums.\n","[md5:\\<md5_32_character_string",">",", ...]","\n@param ignore: is a boolean to ignore errors.\n@param scope: is the dataset scope.\n@param rse: is the rse.\n@param pfns: is a list of PFN.\n@param events: is a list of number of events.\n@param lumiblocknrs: is a list of lumiblocks."),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"registerfilesindatasets"},"registerFilesInDatasets"),Object(i.b)("p",null,"Add existing files to an existing dataset.(attach file to dataset)"),Object(i.b)("p",null,"@param dataset: is a dictionary containing the dataset name and a list of its files.\n{'dsn': ","[{'guid', 'vuid', 'lfn', 'size', 'checksum', 'scope'}]","}\nwhere checksum is 'md5:\\<md5_32_character_string",">","'"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"registernewdataset"},"registerNewDataset"),Object(i.b)("p",null,"Register a brand new dataset and associated files (lists of lfns and guids)."),Object(i.b)("p",null,"@since: 0.2.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param lfns: is a list of logical filenames (LFN).\n@param guids: is a list of file unique identifiers (GUID).\nNote: the GUID is typically assigned by external tools\n(e.g. POOL) and must be passed along as is.\n@param sizes: is a list of the file sizes.\n@param checksums: is a list of the file checksums.\n","[md5:\\<md5_32_character_string",">",", ...]",'\n@param cooldown: is a time delta after which the dataset will be automaticaly frozen.\nAcceptable formats are: "X days" or "X days, HH:MM:SS" or "HH:MM:SS".\n@param provenance: is the dataset provenance, e.g. TO.\n@param group: is the delegated owning group.\n@param hidden: hidden dataset.\n@param scope: is the dataset scope.\n@param rse: is the location of the files if lfns is not empty.\n@param pfns: is a list of PFN.\n@param events: is a list of number of events.\n@param lumiblocknrs: is a list of lumiblocks.\n@param activity: is the activity'),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"DQDaoException is raised,\nin case there is a python or database error in the central catalogs."),Object(i.b)("li",{parentName:"ul"},"DQDatasetExistsException is raised,\nin case there is a dataset with the given name.")),Object(i.b)("p",null,"@return: Dictionary containing the dataset duid, vuid and version information.::\n{'duid': '...', 'vuid': '...', 'version': ...}"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"registernewdataset2"},"registerNewDataset2"),Object(i.b)("p",null,"Register a brand new dataset and associated files (lists of lfns and guids)."),Object(i.b)("p",null,"@since: 0.2.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param lfns: is a list of logical filenames (LFN).\n@param guids: is a list of file unique identifiers (GUID).\nNote: the GUID is typically assigned by external tools\n(e.g. POOL) and must be passed along as is.\n@param sizes: is a list of the file sizes.\n@param checksums: is a list of the file checksums.\n","[md5:\\<md5_32_character_string",">",", ...]",'\n@param cooldown: is a time delta after which the dataset will be automaticaly frozen.\nAcceptable formats are: "X days" or "X days, HH:MM:SS" or "HH:MM:SS".\n@param provenance: is the dataset provenance, e.g. TO.\n@param group: is the delegated owning group.\n@param hidden: hidden dataset.\n@param scope: is the dataset scope.\n@param rse: is the location of the files if lfns is not empty.'),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DQDaoException is raised,\n    in case there is a python or database error in the central catalogs.\n- DQDatasetExistsException is raised,\n    in case there is a dataset with the given name.\n")),Object(i.b)("p",null,"@return: Dictionary containing the dataset duid, vuid and version information.::\n{'duid': '...', 'vuid': '...', 'version': ...}"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"registernewversion"},"registerNewVersion"),Object(i.b)("p",null,"Register a new version of the dataset with the"),Object(i.b)("p",null,"given additional files (lists of lfns and guids).\nPlus, it notifies the subscription catalog for changes\non the dataset and on dataset previous version."),Object(i.b)("p",null,"@since: 0.2.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param lfns: is a list of logical filenames (LFN).\n@param guids: is a list of file unique identifiers (GUID).\nNote: the GUID is typically assigned by external tools\n(e.g. POOL) and must be passed along as is.\n@param sizes: is a list of the file sizes.\n@param checksums: is a list of the file checksums.\n","[md5:\\<md5_32_character_string",">",", ...]","\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- UnsupportedOperation otherwise.\n")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"registernewversion2"},"registerNewVersion2"),Object(i.b)("p",null,"Register a new version of the dataset with the"),Object(i.b)("p",null,"given additional files (lists of lfns and guids).\nPlus, it notifies the subscription catalog for changes\non the dataset and on dataset previous version."),Object(i.b)("p",null,"@since: 0.2.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param lfns: is a list of logical filenames (LFN).\n@param guids: is a list of file unique identifiers (GUID).\nNote: the GUID is typically assigned by external tools\n(e.g. POOL) and must be passed along as is.\n@param sizes: is a list of the file sizes.\n@param checksums: is a list of the file checksums.\n","[md5:\\<md5_32_character_string",">",", ...]","\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- UnsupportedOperation otherwise.\n")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"resetsubscription"},"resetSubscription"),Object(i.b)("p",null,"Reset the dataset subscription registered at the given dq2.location. In Rucio does nothing."),Object(i.b)("p",null,"@since: 0.3.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param location: is the location where the dataset is subscribed.\n@param version: is the dataset version number.\n@param scope: is the dataset scope."),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"resetsubscriptionsinsite"},"resetSubscriptionsInSite"),Object(i.b)("p",null,"Resets the subscriptions registered in the given site. In Rucio does nothing."),Object(i.b)("p",null,"@since: 0.3.0"),Object(i.b)("p",null,"@param site: is the dataset subscription dq2.location."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DQDaoException is raised,\n    in case there is a python or database error in the central catalogs.\n- DQUnknownSubscriptionException is raised,\n    in case there are no subscriptions at the given site.\n")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"searchdatasets"},"searchDatasets"),Object(i.b)("p",null,"ToDo"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"setdatasetreplicatodeleted"},"setDatasetReplicaToDeleted"),Object(i.b)("p",null,"ToDo"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"setmetadataattribute"},"setMetaDataAttribute"),Object(i.b)("p",null,"ToDo Ookey"),Object(i.b)("p",null,"Set the value of the given attribute to the given\nvalue for the given dataset. Operates on the current version."),Object(i.b)("p",null,"@since: 0.2.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param attrname: is the metadata dataset attribute name.\n@param attrvalue: is the metadata dataset attribute value.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DQDaoException is raised,\n    in case there is a python or database error in the central catalogs.\n- DQInvalidRequest is raised,\n    in case the given parameters aren't valid.\n- DQSecurityException is raised,\n    in case the user has no permissions to set metadata attributes on the dataset.\n- DQInvalidRequestException is raised,\n    in case of an invalid attribute name.\n- DQUnknownDatasetException is raised,\n    in case there is no dataset with the given name.\n")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"setreplicametadataattribute"},"setReplicaMetaDataAttribute"),Object(i.b)("p",null,"Set the value of the given attribute to the given"),Object(i.b)("p",null,"value for the given dataset replica. Operates on the current version."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param location: is the location name.\n@param attrname: is the metadata dataset attribute name.\n@param attrvalue: is the metadata dataset attribute value.\n@param scope: is dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- InvalidMetadata is is raised in case of non valid attrname\n- InputValidationError is case of non valid attrvalue\n- UnsupportedOperation if the replica doesn't exist.\n")),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)),Object(i.b)("h2",{id:"verifyfilesindataset"},"verifyFilesInDataset"),Object(i.b)("p",null,"Verifies if the given files' global unique identifiers (GUIDS) are registered on the dataset."),Object(i.b)("p",null,"(since 0.4.0)"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param guids: is a list of file unique identifiers (GUID).\nNote: the GUID is typically assigned by external tools\n(e.g. POOL) and must be passed along as is.\n@param version: is the dataset version number (0 =",">"," the latest version).\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions}:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DQDaoException is raised,\n    in case there is a python or database error in the central catalogs.\n- DQUnknownDatasetException is raised,\n    in case there is no dataset with the given name.\n")),Object(i.b)("p",null,"@return: Dictionary with the following format:\n{\nGUIDX: True, # exist\n(...)\nGUIDY: False # don't exist\n}"),Object(i.b)("table",{style:{border:"none"}},Object(i.b)("tbody",null)))}d.isMDXComponent=!0},412:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return h}));var n=a(0),s=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var c=s.a.createContext({}),b=function(e){var t=s.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=b(e.components);return s.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},u=s.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,r=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=b(a),u=n,h=d["".concat(r,".").concat(u)]||d[u]||p[u]||i;return a?s.a.createElement(h,l(l({ref:t},c),{},{components:a})):s.a.createElement(h,l({ref:t},c))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,r=new Array(i);r[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,r[1]=l;for(var c=2;c<i;c++)r[c]=a[c];return s.a.createElement.apply(null,r)}return s.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);